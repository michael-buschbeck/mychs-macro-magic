!rem // Midgard Combat Defense Script
!rem // 
!mmm script
!mmm   set scriptVersion = "defense 2.2.0-pre1 (2025-04-17)"
!mmm
!mmm   set customizable cCheckVersion = false
!mmm   if cCheckVersion
!mmm     do whisperback(scriptVersion)
!mmm     exit script
!mmm   end if
!mmm
!rem   // MMM compatibility check: die if MMM version too low
!mmm   if version < 1.28
!mmm     do whisperback("Abbruch: MMM-Version 1.28.0 oder höher erforderlich.")
!mmm     exit script
!mmm   end if
!mmm
!mmm   if not m3mgdExchange
!mmm     do whisperback("Game-global m3mgdExchange variables missing.")
!mmm     exit script
!mmm   end if
!mmm
!rem   // Config: set defaults for customizable variables
!rem   //
!rem   //  cOwnID               Override if the script should work from a sender not identical with the character
!rem   //  cWeaponLabel         The label of the weapon, must be identical to your combat sheet
!rem   //
!mmm   if selected and sender.token_id ne selected and m3mgdValidateOwnTokenID(selected.token_id)
!mmm     set customizable cOwnID = selected.token_id
!mmm   else if m3mgdValidateOwnTokenID(sender.token_id)
!mmm     set customizable cOwnID = sender.token_id
!mmm   else
!mmm     set customizable cOwnID = default
!mmm   end if
!mmm   set customizable cWeaponLabel = ""
!rem
!rem   //  cVerbose             Toggle narrative output: true for on, false for off 
!rem   //  cGMSilentMode        true/false: override if GM operates this script and wants to keep it silent
!rem   //  cNoDefense           true/false: flag for defenseless attacks (surprises, ambushes etc.)
!rem   //
!mmm   set customizable cVerbose = true
!mmm   set customizable cGMSilentMode = (cOwnID.PC != 1)
!mmm   set customizable cNoDefense = false
!rem
!rem   //  cDefenseRoll         Override by player to see beautifully animated 3D dice
!rem   //  cSemiManualModifiers Override by self-generated customize block for user to select key conditions for defense roll
!rem   //  
!mmm   set customizable cDefenseRoll = roll("1d20")
!mmm   set customizable cSemiManualModifiers = 0
!mmm   set customizable cManualModifiers = 0
!rem
!rem   // Initialize & collect data
!rem
!rem   // Override chat sender for characters unconnected to the player (usually NPCs)
!mmm   if cOwnID.token_name ne sender
!mmm     set sender = cOwnID.token_name
!mmm   end if
!mmm   
!rem   // Refetch token id to ensure access in case of erroneous override in customize block
!mmm   set cOwnID = m3mgdValidateOwnTokenID(cOwnID)
!rem
!rem   // For player chars, work with the charsheet LP/AP attributes; for NPCs, use the token bars in case they are generic NPCs
!mmm   set cHealthAttr = m3mgdGetHealthAttribute(cOwnID)
!mmm   set cEnduranceAttr = m3mgdGetEnduranceAttribute(cOwnID)
!mmm   
!rem   // Validate attack data and request manual entry if anything is amiss
!mmm   if not cOwnID
!mmm     set payload = "!mmm customize&#13;"
!mmm     set payload = payload & literal("!mmm set cOwnID = \"@" & "{target|Wer verteidigt sich?|token_id}\"") & "&#13;"
!mmm     set payload = payload & "!mmm end customize&#13;"
!mmm     set payload = payload & "&#x25;{MacroSheet|defense}"
!mmm     do whisperback("<" & "br>Wer soll sich denn verteidigen?<" & "br>[**Token auswählen**](" & payload & ")")
!mmm     exit script
!mmm   end if
!mmm   set attackData = m3mgdRetrieveAttack(cOwnID)
!mmm   if not attackData
!mmm     chat: /w "${cOwnID.character_name}" ${"<"}br>Abwehrskript: Angriffsdaten unvollständig oder ungültig${"<"}br>[**Angriffsdaten eingeben**](${m3mgdDefenseDataEntryPayload(cOwnID)})
!mmm     debug chat: ${attackData}
!mmm     exit script
!mmm   end if
!rem
!rem   // Initialize modifier log to collect rule effects as applied by the script for user output
!mmm   set modifierLog = ""
!mmm   set modifierTooltip = ""
!mmm
!mmm   set defenseProperty = "Abwehr"
!mmm   set defensePropertyBonus = "BonusAbwehr"
!rem   // Special case: magic weapons or weapon spells with additional effects scripts whose name is stored in .max
!mmm   if attackData.weaponType[1] ne ""
!mmm     set attackWeaponSpecialEffect = attackData.weaponType[1]
!mmm   end if
!rem   // Special case: magic spells whose name is stored in attack_type.max
!rem   // TODO
!mmm   if attackData.magicSpell
!mmm     set attackSpell = attackData.magicSpell
!mmm     set attackEnduranceCost = attackData.spellEnduranceCost
!mmm     set attackSpellType = attackData.spellType
!mmm     if attackSpellType eq "Geist"
!mmm       set defenseProperty = "ResGeist"
!mmm       set defensePropertyBonus = "BonusResG"
!mmm     else if attackSpellType eq "Körper"
!mmm       set defenseProperty = "ResKörper"
!mmm       set defensePropertyBonus = "BonusResK"
!mmm     else if attackSpellType eq "Umgebung"
!mmm       set defenseProperty = "Abwehr"
!mmm       set defensePropertyBonus = "BonusAbwehr"
!mmm     else 
!mmm       do whisperback("Unknown target type for attack spell -- defense works only for spells targeting Geist, Körper or Umgebung. Aborting.")
!mmm       exit script
!mmm     end if
!mmm     set modifierLog = modifierLog & " {{ Zauberei = Verteidigung mit **" & defenseProperty & "** (" & cOwnID.(defenseProperty) & "+" & cOwnID.(defensePropertyBonus) & ") }}"
!mmm   end if
!mmm
!rem   // Process effects on attacker (after GM approval)
!mmm   set attackerLog = m3mgdProcessAttackerEffects(attackData)
!mmm   if attackerLog 
!mmm     combine chat
!mmm       chat: /w "${attackData.origin.character_name}" ${"&"}{template:default} {{name=Kosten des Angriffs auf ${attackData.target.name}}}
!mmm       for logline in attackerLog...
!mmm         chat: {{ ${logline.key}=${logline.value} }}
!mmm       end for
!mmm     end combine
!mmm   end if
!mmm
!rem   // Initialize defender 
!mmm   set effDefense = cOwnID.(defenseProperty) + cOwnID.(defensePropertyBonus)
!mmm   set endurance = cOwnID.(cEnduranceAttr)
!mmm   set health = cOwnID.(cHealthAttr)
!mmm   set maxHealth = cOwnID.(cHealthAttr).max
!mmm
!rem   // Check if an active defense is even possible
!mmm   set defenseless = m3mgdIsDefenseless(cOwnID)
!mmm   set cNoDefense = (cNoDefense eq "true") or defenseless
!mmm
!mmm   if cNoDefense
!mmm
!mmm     set modifierLog = modifierLog & " {{Wehrlos="
!mmm     set reasonCount = 0
!mmm     for reason in defenseless
!mmm       set reasonCount = reasonCount + 1
!mmm       set modifierLog = modifierLog & reason.icon & reason.label & ": " & reason.desc 
!mmm       if reasonCount < count(defenseless)
!mmm         set modifierLog = modifierLog & " / "
!mmm       end if
!mmm     end for
!mmm     set modifierLog = modifierLog & "}} "
!mmm
!mmm   else
!mmm
!rem     // Not helpless, so let's prep for the big defense!
!rem
!rem     // Validate defense weapon, default to the only one or request manual entry
!mmm     if cWeaponLabel eq "" and not attackData.attackType eq "magic"
!mmm       set defenseWeaponList = m3mgdListDefenseWeapons(cOwnID)
!mmm       if not defenseWeaponList
!mmm         do whisperback("Fehler im Charakterbogen: " & cOwnID.name & " hat keine Abwehrwaffen bzw. -fähigkeiten.")
!mmm         exit script
!mmm       else if count(defenseWeaponList) == 1
!mmm         set cWeaponLabel = cOwnID.(defenseWeaponList)
!mmm       else 
!mmm         chat: /w "${cOwnID.character_name}" ${m3mgdWeaponSelectorChatMenu(cOwnID, "defense", attackData.weaponType)}
!mmm         exit script
!mmm       end if
!mmm     end if
!rem
!rem     // If user wants to use a parry weapon/shield, validate
!mmm     set parryWeaponUsable = false
!mmm     set parryWeapon = (cOwnID.(findattr(cOwnID, "Abwehr", "AbwWaffe", cWeaponLabel, "FWAbwWaffe")) > 0)
!mmm     if parryWeapon and not attackData.attackType eq "magic"
!mmm       if m3mgdParryLargeShieldTypes where ... eq cWeaponLabel 
!mmm         set parryWeaponUsable = true
!mmm       else if (m3mgdParrySmallShieldTypes where ... eq cWeaponLabel) and (m3mgdParrySmallShieldEffectiveAgainst where ... eq attackData.weaponType)
!mmm         set parryWeaponUsable = true
!mmm       else if (m3mgdParryStandardTypes where ... eq cWeaponLabel) and (m3mgdParryStandardEffectiveAgainst where ... eq attackData.weaponType)
!mmm         set parryWeaponUsable = true
!mmm       end if
!rem       // If shield/parry weapon accessible and endurance > 0, check applicability and calculate defense benefits
!mmm       if (cOwnID.(cEnduranceAttr).max > 0 and endurance > 0 and parryWeaponUsable) or (cOwnID.(cEnduranceAttr).max == 0 and parryWeaponUsable)
!mmm         set effParryWeaponSkill = cOwnID.(findattr(cOwnID, "Abwehr", "AbwWaffe", cWeaponLabel, "FWAbwWaffe")) + cOwnID.(findattr(cOwnID, "Abwehr", "AbwWaffe", cWeaponLabel, "WaffeAbwB"))
!rem         // Endurance protection: reverse sign for more logical handling (modifier is stored as negative in character sheet)
!mmm         set parryWeaponEnduranceProtection = -1 * cOwnID.(findattr(cOwnID, "Abwehr", "AbwWaffe", cWeaponLabel, "AbwWAP"))
!mmm         set effDefense = effDefense + effParryWeaponSkill
!mmm         set modifierLog = modifierLog & " {{" & cWeaponLabel & "= WW inkl. +" & effParryWeaponSkill & ", AP-Verlust (leichte Treffer) -" & parryWeaponEnduranceProtection & "}}"
!mmm       else if not parryWeaponUsable
!mmm         set modifierLog = modifierLog & " {{" & cWeaponLabel & "= nutzlos gegen " & attackData.weaponType & "}}"
!mmm       else
!mmm         set modifierLog = modifierLog & " {{" & cWeaponLabel & "= nutzlos: bin erschöpft (AP=0)}}"
!mmm       end if
!mmm     else if not (cWeaponLabel eq cOwnID.(findattr(cOwnID, "Abwehr", "AbwWaffe", cWeaponLabel, "AbwWaffe"))) and not attackData.attackType eq "magic"
!rem       // Script was called for a parry weapon that was not found in the character sheet
!mmm       set modifierLog = modifierLog & " {{" & cWeaponLabel & "= nicht im Charakterblatt}}"
!mmm       set cWeaponLabel = ""
!mmm     end if
!mmm
!rem     // Collect defense modifiers
!mmm     set modifiers = 0
!mmm     set autoModifiers = 0
!rem     // 1. Active status markers for exhaustion, injury etc.
!mmm     for activeMod in m3mgdActiveStatusModifiers(cOwnID, "defense")
!mmm       set autoModifiers = autoModifiers + activeMod.rollModifiers.defense
!mmm       set modifierLog = modifierLog & " {{" & activeMod.label & "=" & sign(activeMod.rollModifiers.defense, "display") & "}} "
!mmm       set modifierTooltip = modifierTooltip & " " & activeMod.label & "&nbsp;&nbsp;&nbsp;" & sign(activeMod.rollModifiers.defense, "display") & " "
!mmm     end for
!rem     // 2. Dropdown prompt: Focused defense, surprise (taken from prior user input customize block)
!mmm     if cSemiManualModifiers == 4 
!mmm       set noFocusedDefenseReasons = m3mgdActiveStatusModifiers(cOwnID, "noFocusedDefense")
!mmm       if not noFocusedDefenseReasons
!mmm         set autoModifiers = autoModifiers + 4
!mmm         set modifierLog = modifierLog & " {{Konzentrierte Abwehr=+4}} "
!mmm         set modifierTooltip = modifierTooltip & " Konzentrierte&nbsp;Abwehr&nbsp;&nbsp;&nbsp;+4 "
!mmm       else
!mmm         set modifierLog = modifierLog & " {{Konzentrierte Abwehr=**Derzeit nicht möglich:** " & (noFocusedDefenseReasons... where (...key eq "label" or ...key eq "desc")) & "}} "
!mmm         set modifierTooltip = modifierTooltip & " " & activeMod.label & "&nbsp;&nbsp;&nbsp;" & activeMod.rollModifiers.defense & " "
!mmm       end if
!mmm     else if cSemiManualModifiers == -2
!mmm       set modifierLog = modifierLog & " {{Überstürzter eigener Angriff=-2}} "
!mmm       set modifierTooltip = modifierTooltip & " Überstürzter&nbsp;eigener&nbsp;Angriff&nbsp;&nbsp;&nbsp;-2 "
!mmm     else if cSemiManualModifiers == -4
!mmm       set modifierLog = modifierLog & " {{Überraschender Angriff=-4}} "
!mmm       set modifierTooltip = modifierTooltip & " Überraschender&nbsp;Angriff&nbsp;&nbsp;&nbsp;-4 "
!mmm     end if
!rem     // Sum up all the modifiers (taking manual modifiers from prior user input customize block)
!mmm     set modifiers = modifiers + autoModifiers + cSemiManualModifiers + cManualModifiers
!mmm     if cManualModifiers != 0
!mmm       if cManualModifiers > 0
!mmm         set cManualModifiers = "+" & (cManualModifiers * 1)
!mmm       end if
!mmm       set modifierLog = modifierLog & " {{Manuelle Modifikatoren=" & cManualModifiers & "}} "
!mmm       set modifierTooltip = modifierTooltip & " Manuelle&nbsp;Modifikatoren&nbsp;&nbsp;&nbsp;" & cManualModifiers & " "
!mmm     end if
!mmm     if modifierLog eq ""
!mmm       set modifierLog = " {{Boni/Mali=keine}} "
!mmm       set modifierTooltip = " Boni/Mali&nbsp;&nbsp;&nbsp;keine "
!mmm     end if
!mmm
!rem     // Run & format rolls
!rem
!mmm     set defenseResult = rollResult(cDefenseRoll, effDefense, modifiers)
!mmm     set modifiers = highlight(sign(modifiers, "display"), "info")
!mmm
!mmm   end if
!mmm
!mmm   set effEnduranceLoss = 0
!mmm   set effHealthLoss = 0
!mmm
!mmm   if not cNoDefense and ((not attackData.criticalAttack and ((defenseResult >= attackData.attackResult and not isfumble(cDefenseRoll)) or iscritical(cDefenseRoll))) or (attackData.criticalAttack and iscritical(cDefenseRoll)))
!mmm
!rem     // Defense successful
!mmm     set defenseSuccess = true
!mmm
!rem     // Calculate endurance damage (only for max endurance > 0; may be reduced due to parry weapon or shield properties)
!mmm     if not cOwnID.(cEnduranceAttr).max == 0 and parryWeaponEnduranceProtection
!mmm       set effEnduranceLoss = zeroOrPositive(attackData.damageResult - parryWeaponEnduranceProtection)
!mmm     else if not cOwnID.(cEnduranceAttr).max == 0
!mmm       set effEnduranceLoss = attackData.damageResult
!mmm     end if
!mmm
!mmm   else 
!mmm
!rem     // Defense failed (or there was no defense)
!mmm     set defenseSuccess = false
!mmm
!rem     // Critically successful magic attacks
!mmm     if attackSpell and attackData.criticalAttack and defenseResult < 20
!mmm       set attackData = {attackData, damageResult: attackData.damageResult * 2 }
!mmm     else if attackSpell and attackData.criticalAttack and not isfumble(cDefenseRoll) and attackEnduranceCost >= 2
!mmm       set attackerNewEndurance = m3mgdModifyEndurance(floor(attackEnduranceCost / 2), attackData.origin)
!mmm     end if
!mmm
!rem     // Defender loses full hit points worth of endurance regardless of armor, if not an undead creature with unlimited endurance
!mmm     if not cOwnID.(cEnduranceAttr).max == 0
!mmm       set effEnduranceLoss = attackData.damageResult
!mmm     else 
!mmm       set effEnduranceLoss = 0
!mmm     end if
!mmm
!rem     // Calculate damage to health depending on armor (only for max health > 0, ghosts do not lose health, armor does not work against direct magic attacks)
!mmm     set effArmorProtection = m3mgdEffectiveArmorProtection(cOwnID, attackData.weaponType, attackData.attackType)
!mmm     if not cOwnID.(cHealthAttr).max == 0 and effArmorProtection
!mmm       set effHealthLoss = zeroOrPositive(attackData.damageResult - effArmorProtection)
!mmm     else if not cOwnID.(cHealthAttr).max == 0
!mmm       set effHealthLoss = attackData.damageResult
!mmm     end if
!mmm   end if
!mmm
!rem   // Process loss of endurance, if any, and applicable consequences
!mmm   set newEndurance = m3mgdModifyEndurance(-effEnduranceLoss)
!mmm   set effEnduranceLoss = highlight(effEnduranceLoss, "info")
!mmm
!rem   // Process loss of health and applicable consequences 
!mmm   set newHealth = m3mgdModifyHealth(-effHealthLoss)
!mmm   if effHealthLoss > 0 and newHealth < 0
!mmm     set timeToDie = roll("1d6-" & abs(newHealth)) 
!mmm   end if
!mmm   set effHealthLoss = highlight(effHealthLoss, "info")
!mmm
!rem   // Process or indicate if an endurance ceiling is in place (for serious injuries, health <= 50%)
!mmm   if m3mgdAttrCeiling(cOwnID, cEnduranceAttr)
!mmm     set newEndurance = highlight(cOwnID.(cEnduranceAttr), "important", "Schwächelnd bis der Heiler kommt (max. " & round(cOwnID.(cEnduranceAttr).max/2) & "=50%)")
!mmm   end if
!rem
!rem   // Process experience gain for attacker if script is run on an NPC, in which case player is GM with control over attacker sheet
!mmm   if isChar(attackData.origin) and not cNoDefense and ((cOwnID.(cEnduranceAttr).max == 0 and not defenseSuccess) or (cOwnID.(cEnduranceAttr).max != 0 and endurance > 0 and effEnduranceLoss > 0))
!mmm     set xpGain = m3mgdProcessAttackXP(attackData.attackType, attackData.damageRoll, attackData.origin, cOwnID)
!mmm     set modifierLog = modifierLog & " {{ Erfahrung=" & attackData.origin.name & ": +" & xpGain & " EP}} "
!mmm   else if not cNoDefense and cOwnID.(cEnduranceAttr).max == 0 and defenseSuccess
!mmm     set modifierLog = modifierLog & " {{ Erfahrung=" & attackData.origin.name & ": keine (∞ AP, abgewehrt) }} "
!mmm   else if cNoDefense or (cOwnID.(cEnduranceAttr).max != 0 and endurance <= 0)
!mmm     set modifierLog = modifierLog & " {{ Erfahrung=" & attackData.origin.name & ": keine (Ziel erschöpft/wehrlos) }} "
!mmm   else if cOwnID.(cEnduranceAttr).max != 0 and effEnduranceLoss <= 0
!mmm     set modifierLog = modifierLog & " {{ Erfahrung=" & attackData.origin.name & ": keine (kein AP-Verlust) }} "
!mmm   end if
!mmm
!rem   // Register practice point, if applicable
!mmm   if not cNoDefense and parryWeapon and parryWeaponUsable and iscritical(cDefenseRoll)
!mmm     if m3mgdProcessCombatPP(cOwnID, cWeaponLabel)
!mmm       set modifierLog = modifierLog & " {{Praxispunkt=[x](https://media.giphy.com/media/hKafco7mFwBioBxqFT/giphy.gif)}} "
!mmm     end if
!mmm   end if
!mmm
!rem   // Verbose output
!mmm   if cVerbose
!mmm     combine chat
!rem       // Check if script is run for an NPC (whisper data to GM only)
!mmm       if cGMSilentMode
!mmm         chat: /w GM 
!mmm       end if
!mmm       if defenseSuccess
!mmm         chat       [DefenseSuccess]:           Ich winde mich, strecke mich, wehre mich, und erleide nur einen **leichten Treffer**.
!mmm         if newHealth < 0
!mmm           chat     [OngoingCriticalInjury]:    ***Ich bin immer noch lebensgefährlich verletzt, mein Countdown läuft weiter.*** [x](https://media.giphy.com/media/OY9XK7PbFqkNO/giphy.gif) ***Jetzt könnte ich eine heilende Hand gebrauchen...***
!mmm         end if
!mmm       else
!mmm         if attackData.criticalAttack
!mmm           chat     [DefenseFailureCritDamage]: Mich erwischt ein schwerer **kritischer Treffer**.
!mmm         else 
!mmm           chat     [DefenseFailureRegDamage]:  Mich erwischt ein schwerer Treffer.
!mmm         end if
!mmm         if effHealthLoss > 0.33 * maxHealth
!mmm           chat     [DefenseFailureHugeHit]:    AAAAAAARRG! Blut spritzt, Knochen brechen, solche Treffer halte ich nicht viele aus!
!mmm         else if effHealthLoss > .2 * maxHealth
!mmm           chat     [DefenseFailureSeriousHit]: AAAH! Das darf mir nicht oft passieren.
!mmm         else if effHealthLoss > .1 * maxHealth
!mmm           chat     [DefenseFailureModestHit]:  Aua!
!mmm         else if effHealthLoss > 0
!mmm           chat     [DefenseFailureMinorHit]:   Au. Pieks. Na warte!
!mmm         else 
!mmm           chat     [DefenseFailureNoDamage]:   Doch kein Problem für meine Rüstung, außer Schweiß verliere ich nichts.
!mmm         end if
!mmm         if newHealth < 0 and timeToDie < 0
!mmm           chat     [EffectsImmediateDeath]:    War schön mit euch allen. Bis dann, und danke für den Fisch! $[ownName]{cOwnID.name}, out.${"<"}br>[x](https://media.giphy.com/media/96quMvXlWpwRO/giphy.gif)
!mmm         else if newHealth < 0 and timeToDie >= 0
!mmm           chat     [EffectsCriticalInjury]:    ***Ich bin lebensgefährlich verletzt.*** Ich habe noch **$[timeToDie]{timeToDie+0} Minuten** zu leben.${"<"}br>[x](https://media.giphy.com/media/OY9XK7PbFqkNO/giphy.gif)${"<"}br>***Jetzt könnte ich eine heilende Hand gebrauchen...***
!mmm         end if
!mmm       end if 
!mmm     end combine
!mmm   end if
!rem
!rem   // Output data table using data table execution code from library
!mmm   do m3mgdDefenseDataTable(attackData)
!mmm
!rem   // If present, reduce counters for defense-specific modifier effects
!mmm   set endOfActionSummary = m3mgdUpdatePersistentEffectsCounters(cOwnID, "defense")
!mmm   if endOfActionSummary
!mmm     set modifierLog = modifierLog & " {{ Abwehrzähler=" & endOfActionSummary & " }}"
!mmm   end if
!mmm
!rem   // Output modifier log and PP reminder
!mmm   chat: /w GM ${"&"}{template:default} ${modifierLog} 
!mmm   if not cGMSilentMode
!mmm     chat: /w "${cOwnID.character_name}" ${"&"}{template:default} ${modifierLog}
!mmm   end if
!mmm   
!rem   // Weapon-specific special damage effects
!mmm   if not defenseSuccess and attackWeaponSpecialEffect
!mmm     do m3mgdWeaponSpecialEffect(attackWeaponSpecialEffect, attackData.origin, attackData.target)
!mmm   end if
!mmm
!rem   // Injury & exhaustion special effects
!mmm   if effHealthLoss > 0 or effEnduranceLoss > 0
!mmm     do m3mgdInjuryFX(cOwnID, effHealthLoss / maxHealth, effEnduranceLoss / cOwnID.(cEnduranceAttr).max)
!mmm   end if
!mmm   
!mmm end script