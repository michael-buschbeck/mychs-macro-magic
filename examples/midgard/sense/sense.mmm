!rem // Midgard Multi-Sense Script 
!rem //
!rem // If called without a config script, sends a menu of sense options to the chat.
!rem //
!mmm script
!mmm   set scriptVersion = "2.0.3 (2022-07-16)"
!rem
!rem   // MMM compatibility check: die if MMM version too low
!mmm   if version < 1.24
!mmm     do whisperback("Abbruch: MMM-Version 1.24.0 oder höher erforderlich.")
!mmm     exit script
!mmm   end if
!rem
!rem   // FUNCTIONS
!rem   //
!mmm   function senseOrgan(senseLabel)
!mmm     if senseLabel eq "Sehen" or senseLabel eq "Nachtsicht"
!mmm       return "Augen"
!mmm     else if senseLabel eq "Hören"
!mmm       return "Ohren"
!mmm     else if senseLabel eq "Riechen"
!mmm       return "Geruchsknospen"
!mmm     else if senseLabel eq "Schmecken"
!mmm       return "Geschmacksknospen"
!mmm     else 
!mmm       return "mysteriösen unbekannten Sinnesorganen"
!mmm     end if
!mmm   end function
!rem
!mmm   function senseMenu()
!mmm   
!mmm     set scriptCommand = "&#x25;{MacroSheet|sense}"
!mmm     set manualModifierQuery = literal("?" & "{" & "Modifikator|-8" & "}")
!mmm
!mmm     set selectModifierQuery = literal("?" & "{" & "Die ausgewählten sind... ")
!mmm     set selectModifierQuery = selectModifierQuery & literal("| normal unterwegs -8,-8")
!mmm     set selectModifierQuery = selectModifierQuery & literal("| absolut wachsam -0,0")
!mmm     set selectModifierQuery = selectModifierQuery & literal("}")
!mmm     
!mmm     set autoModifier = -8
!mmm     set autoTokenList = "-MFXIKG9zCxQLxsEZ6PW", "-MF0on5H-EnbMJQxQDhQ", "-MF0l4ve_sPrzpbctzUM", "-MFMpuvq2hfA-Y3i4EAe", "-MEnkmmvHcco4HHxg8R0", "-MGKyDWy10K_y3FS4VKi"
!mmm     
!mmm     set menuCode = "&" & "{template:default}" & "{{name=Wahrnehmung}} "
!mmm
!mmm     for senseGroupLabel in "Sechster Sinn", "Sehen", "Nachtsicht", "Hören", "Riechen", "Schmecken"
!mmm     
!mmm       set successMessageQuery = literal("\"?" & "{" & senseGroupLabel & " - Nachricht für Aufmerksame|}\"")
!mmm       set noMessage = literal("\"\"")
!mmm       if senseGroupLabel eq "Sechster Sinn"
!mmm         set failureMessage = noMessage
!mmm         set critFailMessageQuery = noMessage
!mmm       else
!mmm         set failureMessage = literal("\"Deinen " & senseOrgan(senseGroupLabel) & " fällt nichts besonderes auf.\"")
!mmm         set critFailMessageQuery = literal("\"?" & "{" & senseGroupLabel & " - Nachricht für Patzer|Deinen " & senseOrgan(senseGroupLabel) & " fällt nichts besonderes auf.}\"")
!mmm       end if
!mmm
!mmm       set menuCode = menuCode & "{{ " & senseGroupLabel & " }} "
!mmm       if senseGroupLabel eq "Riechen" or senseGroupLabel eq "Schmecken" 
!mmm         set senseGroupLabel = "Riechen/Schmecken"
!mmm       end if
!mmm       set menuCode = menuCode & "{{ "
!mmm       set menuCode = menuCode & "[" & "⚙️" & "]("
!mmm       set menuCode = menuCode & literal("!mmm customize") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSense=\"" & senseGroupLabel & "\"") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSenseModifier=") & manualModifierQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cTokenList=selected") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSuccessMessage=") & successMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cRegularFailureMessage=") & failureMessage & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cCriticalFailureMessage=") & critFailMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm end customize") & "&#13;" & scriptCommand & ")"
!mmm       set menuCode = menuCode & " &nbsp; "
!mmm       set menuCode = menuCode & "[" & "Auswahl" & "]("
!mmm       set menuCode = menuCode & literal("!mmm customize") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSense=\"" & senseGroupLabel & "\"") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSenseModifier=") & selectModifierQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cTokenList=selected") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSuccessMessage=") & successMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cRegularFailureMessage=") & failureMessage & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cCriticalFailureMessage=") & critFailMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm end customize") & "&#13;" & scriptCommand & ")"
!mmm       set menuCode = menuCode & " &nbsp; "
!mmm       set menuCode = menuCode & "[" & "Auto🤐" & "]("
!mmm       set menuCode = menuCode & literal("!mmm customize") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSense=\"" & senseGroupLabel & "\"") & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSenseModifier=") & autoModifier & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cTokenList=" & stringify(autoTokenList)) & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cSuccessMessage=") & successMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cRegularFailureMessage=") & noMessage & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm set cCriticalFailureMessage=") & critFailMessageQuery & "&#13;"
!mmm       set menuCode = menuCode & literal("!mmm end customize") & "&#13;" & scriptCommand & ")"
!mmm       set menuCode = menuCode & "}} "
!mmm       
!mmm     end for
!mmm     
!mmm     do whisperback(menuCode)
!mmm   
!mmm   end function
!rem
!rem   // Config: set defaults for customizable variables
!rem   //
!rem   //  cCheckVersion            Toggle version check
!rem   //  cSense                   Must be one of the sense skills in the character sheet table "sinne", column "Fertigkeit2"
!rem   //  cSenseModifier           Modifier to the sense roll
!rem   //  cSuccessMessage,         Text to be sent to players in case of success / failure / critical failure, or in case 
!rem   //  cRegularFailureMessage,  of cSense eq "Sixth Sense", success only (otherwise the player does not receive anything)
!rem   //  cCriticalFailureMessage     
!rem   //  cTokenList               List of valid token_id values for characters that get the sense rolls. Duplicates are ignored.
!rem   //
!mmm   set customizable cCheckVersion = false
!mmm   set customizable cSense = default
!mmm   set customizable cSenseModifier = default
!mmm   set customizable cSuccessMessage = default
!mmm   set customizable cRegularFailureMessage = "Nichts besonderes hier."
!mmm   set customizable cCriticalFailureMessage = "Nichts besonderes hier."
!mmm   set customizable cTokenList = default
!mmm
!mmm   if cCheckVersion
!mmm     do whisperback("Midgard Multi Sense Script " & scriptVersion)
!mmm     exit script
!mmm   end if
!mmm
!rem   // Called without proper config -> show menu
!rem   //
!mmm   if isdefault(cSense)
!mmm     do senseMenu()
!mmm     exit script
!mmm   end if
!mmm   
!rem   // Initialize 
!rem   //
!mmm   if isdefault(cTokenList) and selected
!mmm     set cTokenList = selected
!mmm   end if
!mmm
!rem   // Output formatting constants
!mmm   set playerMsgEmoji = "💬"
!mmm   set cssGMTableHead = "#\" style=\"border: 1px solid #000000; display:block;background-color:#702082;margin:0px;padding:5px;font-size:1.05em;font-style:normal;font-weight:bold;color:#FFFFFF;text-decoration:none;"
!mmm   set cssGMTableSection = "#\" style=\"border-left: 1px solid #000000;border-right: 1px solid #000000; display:block;background-color:#FFFFFF;margin:0px;padding:5px;font-size:1.05em;font-style:normal;font-weight:bold;color:#000000;text-decoration:none;"
!mmm   set cssGMTableItem = "#\" style=\"border-left: 1px solid #000000;border-right: 1px solid #000000;border-bottom: 1px solid #000000; display:block;background-color:#f0f0f0;margin:0px;padding:5px;font-style:normal;color:#000000;text-decoration:none;"
!mmm   set cssGMTableItemSuccess = "#\" style=\"border-left: 1px solid #000000;border-right: 1px solid #000000;border-bottom: 1px solid #000000; display:block;background-color:#60f086;margin:0px;padding:5px;font-style:normal;color:#000000;text-decoration:none;"
!mmm   set cssGMTableItemCriticalFailure = "#\" style=\"border-left: 1px solid #000000;border-right: 1px solid #000000;border-bottom: 1px solid #000000; display:block;background-color:#f06560;margin:0px;padding:5px;font-style:normal;color:#000000;text-decoration:none;"
!rem
!rem   // Due diligence: weed out duplicate tokens, in case cTokenList was populated manually or via {target}
!mmm   for id in cTokenList
!mmm     set dupeFound = false
!mmm     for trimmedId in trimmedTokenList
!mmm       if trimmedId eq id
!mmm         set dupeFound = true
!mmm       end if
!mmm     end for
!mmm     if not dupeFound
!mmm       set trimmedTokenList = trimmedTokenList, id
!mmm     end if
!mmm   end for
!rem
!mmm   combine chat
!mmm     chat: /w GM [${cSense}](${cssGMTableHead})
!mmm
!rem     // Run through selected characters
!mmm     for id in trimmedTokenList
!mmm
!rem       // Initialize: refetch token ID and get name and skills
!mmm       set tokenID = id.token_id
!mmm       set tokenEffSkill = tokenID.(findattr(tokenID, "sinne", "Fertigkeit2", cSense, "FW2")) + tokenID.(findattr(tokenID, "sinne", "Fertigkeit2", cSense, "Fertigkeitsbonus2"))
!mmm
!mmm       set tokenSenseModifier = cSenseModifier
!mmm       for activeStatusSenseModifier in m3mgdActiveStatusModifiers(tokenID, cSense)
!mmm         set tokenSenseModifier = tokenSenseModifier + activeStatusSenseModifier.value.rollModifiers.(cSense)
!mmm       end for
!mmm       if cSense eq "Nachtsicht" and not tokenEffSkill
!rem         // For characters without night vision, substitute Vision without a bonus & slap -2 on the modifier
!mmm         set tokenEffSkill = tokenID.(findattr(tokenID, "sinne", "Fertigkeit2", "Sehen", "FW2"))
!mmm         set tokenSenseModifier = tokenSenseModifier - 2
!mmm       end if
!mmm
!rem       // Error handling
!mmm       if isdenied(tokenID) or isunknown(tokenID)
!mmm         set skippedList = skippedList, ("Token '" & tokenID & "': no/inaccessible character")
!mmm       else if not tokenEffSkill
!mmm         set skippedList = skippedList, ("Token '" & tokenID.token_name & "': '" & cSense & "' inaccessible or does not exist") 
!rem       // And if everything is ready...
!mmm       else
!rem         // Execute sense rolls 
!mmm         set effModifier = sign(tokenEffSkill + tokenSenseModifier, "math")
!mmm         set senseRoll = roll("1d20" & effModifier)
!rem         // Overwrite tooltip to break down components
!mmm         set senseResultTooltip = senseRoll & " = (1d20 = " & (senseRoll - effModifier) & ") + (EW = " & tokenEffSkill & ") " & sign(tokenSenseModifier, "display")
!mmm         set senseResult = highlight(senseRoll, default, senseResultTooltip)
!mmm         
!rem         // Compose output table row for GM
!mmm         set playerMessage = ""
!mmm         chat: [${tokenID.token_name} ${senseResult}](${cssGMTableSection})
!mmm         if senseResult >= 20 or iscritical(senseRoll)
!mmm           set playerMessage = "/w \"" & tokenID.character_name & "\" " & cSuccessMessage
!mmm           chat: [${playerMsgEmoji} *${cSuccessMessage}*](${cssGMTableItemSuccess})
!mmm         else if (cSense ne "Sechster Sinn" and isfumble(senseRoll))
!mmm           set playerMessage = "/w \"" & tokenID.character_name & "\" " & cCriticalFailureMessage
!mmm           chat: [${playerMsgEmoji} *${cCriticalFailureMessage}*](${cssGMTableItemCriticalFailure})
!mmm         else if (cSense ne "Sechster Sinn") and (cRegularFailureMessage ne "")
!mmm           set playerMessage = "/w \"" & tokenID.character_name & "\" " & cRegularFailureMessage
!mmm           chat: [${playerMsgEmoji} *${cRegularFailureMessage}*](${cssGMTableItem})
!mmm         else
!mmm           chat: [*(Keine Nachricht an Spieler)*](${cssGMTableItem})
!mmm         end if
!mmm
!rem         // Queue output message for player
!mmm         if playerMessage ne ""
!mmm           set messageQueue = messageQueue, playerMessage
!mmm         end if
!mmm       end if
!mmm     end for
!mmm
!rem     // Tell GM which selected characters were skipped
!mmm     if skippedList
!mmm       chat: [Skipped Tokens](${cssGMTableSection})
!mmm       for skippedItem in skippedList
!mmm         if skippedItem
!mmm           chat: [${skippedItem}](${cssGMTableItem})
!mmm         end if
!mmm       end for
!mmm     end if
!mmm   end combine
!mmm
!rem   // Closing the curtain: Report results to players
!rem   //
!mmm   for playerMessage in messageQueue
!mmm     do chat(playerMessage)
!mmm   end for
!mmm
!mmm end script