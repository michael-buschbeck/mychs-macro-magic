!rem // Midgard Ranged Attack Script
!rem //
!mmm script
!mmm   set scriptVersion = "rangedAttack 2.2.0 (2025-04-23)"
!mmm
!mmm   set customizable cCheckVersion = false
!mmm   if cCheckVersion
!mmm     do whisperback(scriptVersion)
!mmm     exit script
!mmm   end if
!mmm
!rem   // MMM compatibility check: die if MMM version too low
!mmm   if version < 1.28
!mmm     do whisperback("Abbruch: MMM-Version 1.28.0 oder höher erforderlich.")
!mmm     exit script
!mmm   end if
!mmm
!mmm   if not m3mgdExchange
!mmm     do whisperback("Game-global m3mgdExchange variables missing.")
!mmm     exit script
!mmm   end if
!rem
!rem   // Config: set defaults for customizable variables
!rem   //
!rem   //  cOwnID               Override if the script should work from a sender not identical with the character
!rem   //  cWeaponLabel         The label of the weapon, must be identical to your combat sheet
!rem   //  cWeaponName          Optional: The name of a named weapon, e.g. "Sting"
!rem   //  cWeaponType          The type of weapon for narration, the "sword" in "I'm swinging my sword Glamdring"
!rem   //  cRangeUpperBound*    Upper bounds of close, mid and far ranges
!rem   //  cAmmoLabel           Ammunition descriptor (plural, for attribute and output)
!rem   //  cAmmoWarnThreshold   Proportion of maximum ammunition at which remaining ammo is highlighted
!rem   //  cAmmoMagic           Default: false, customize as true to enable extra damage from magic ammunition
!rem   //  cAmmoMagicLabel      Magic ammunition descriptor (plural, for attribute and output)
!rem   //  cAmmoMagicSkillBonus Optional modifier ("+x") for the attack roll if magic ammunition is used
!rem   //  cAmmoMagicDamage     Damage roll expression ("1d6+x") for optional additional magic damage
!rem   //  cMagicEnduranceCost  Optional endurance cost (integer) for using magic ammunition
!rem   //
!mmm   set customizable cOwnID = sender.token_id
!mmm   if selected and sender.token_id ne selected and m3mgdValidateOwnTokenID(selected.token_id)
!mmm     set customizable cOwnID = selected.token_id
!mmm   else if m3mgdValidateOwnTokenID(sender.token_id)
!mmm     set customizable cOwnID = sender.token_id
!mmm   else
!mmm     set customizable cOwnID = default
!mmm   end if
!mmm   set customizable cWeaponLabel = default
!mmm   set customizable cWeaponName = ""
!mmm   set customizable cWeaponType = default
!mmm   set customizable cRangeUpperBoundClose = default
!mmm   set customizable cRangeUpperBoundMid = default
!mmm   set customizable cRangeUpperBoundFar = default
!mmm   set customizable cWeaponMagicSkillBonus = ""
!mmm   set customizable cAmmoLabel = default
!mmm   set customizable cAmmoWarnThreshold = 0.25
!mmm   set customizable cAmmoMagic = false
!mmm   set customizable cAmmoMagicLabel = ""
!mmm   set customizable cAmmoMagicSkillBonus = 0
!mmm   set customizable cAmmoMagicDamage = ""
!mmm   set customizable cMagicEnduranceCost = 0
!rem
!rem   //  cVerbose             Toggle narrative output: true for on, false for off (made for oeGStefan)
!rem   //  cGMSilentMode        true/false: override if GM operates this script and wants to keep it silent
!rem   //  cFoeNameDefault      Output label for targets without names
!rem   //
!mmm   set customizable cVerbose = true
!mmm   set customizable cGMSilentMode = (cOwnID.PC != 1)
!mmm   set customizable cFoeNameDefault = "Fiesling ohne Namen"
!rem
!rem   //  cTargetID            Target token: override in customize block with Roll20 target picker
!rem   //  cSemiManualModifiers Override in customize block with nested dropdowns or preset value
!rem   //  cManualModifiers     Override in customize block with input box or preset value
!rem   //  cAttackRoll          Override in customize block to see beautifully animated 3D dice
!rem   //  
!mmm   set customizable cTargetID = ""
!mmm   set customizable cSemiManualModifiers = default
!mmm   set customizable cManualModifiers = default
!mmm   set customizable cAttackRoll = roll("1d20")
!mmm
!rem
!rem   // Initialize & collect data
!rem
!rem   // Override chat sender for characters unconnected to the player (usually NPCs)
!mmm   if cOwnID.token_name ne sender
!mmm     set sender = cOwnID.token_name
!mmm   end if
!mmm   
!rem   // Refetch token id to ensure access in case of erroneous override in customize block
!mmm   set cOwnID = m3mgdValidateOwnTokenID(cOwnID)
!mmm   if not cOwnID
!mmm     do whisperback(scriptVersion & ": Invalid own token ID configured. Check custom config script.")
!mmm     exit script
!mmm   end if
!rem
!rem   // Abort attack if injury or critical effect status does not allow for it
!mmm   if m3mgdIsUnfitToAttack(cOwnID)
!mmm     exit script
!mmm   end if
!mmm
!rem   // Constants
!rem
!mmm   set emojiMagic = "✨"
!mmm
!rem   // Validate attack weapon and request manual entry if selection is missing
!mmm
!mmm   if cWeaponLabel eq "" or not cOwnID.(findattr(cOwnID, "Angriff", "Waffe", cWeaponLabel, "WaffeEW"))
!mmm     set weaponsList = m3mgdListRangedAttackWeapons(cOwnID)
!mmm     if not weaponsList
!mmm       do whisperback(cOwnID.name & " hat keine Fernkampfwaffen bzw. -fähigkeiten.")
!mmm       exit script
!mmm     else if count(weaponsList) == 1
!mmm       set cWeaponLabel = cOwnID.(weaponsList)
!mmm     else if cWeaponLabel ne ""
!mmm       do whisperback("Fehler: " & cOwnID.name & " hat keine Fernkampfwaffe " & cWeaponLabel & ".")
!mmm       exit script
!mmm     else 
!mmm       chat: /w "${cOwnID.character_name}" ${m3mgdWeaponSelectorChatMenu(cOwnID, "ranged")}
!mmm       exit script
!mmm     end if
!mmm   end if
!mmm
!mmm   if isdefault(cSemiManualModifiers) or isdefault(cManualModifiers)
!mmm     chat: /w "${cOwnID.character_name}" ${m3mgdWeaponSelectorChatMenu(cOwnID, "ranged")}
!mmm     exit script
!mmm   end if
!mmm
!rem   // Pull missing weapon properties for chosen attack weapon (works only for standard weapons)
!mmm
!mmm   set weaponProperties = m3mgdRangedWeaponProperties(cWeaponLabel)
!mmm   if not isunknown(weaponProperties)
!mmm     if isdefault(cWeaponType)
!mmm       set cWeaponType = weaponProperties[0]
!mmm     end if
!mmm     if isdefault(cRangeUpperBoundClose)
!mmm       set cRangeUpperBoundClose = weaponProperties[1]
!mmm     end if
!mmm     if isdefault(cRangeUpperBoundMid)
!mmm       set cRangeUpperBoundMid = weaponProperties[2]
!mmm     end if
!mmm     if isdefault(cRangeUpperBoundFar)
!mmm       set cRangeUpperBoundFar = weaponProperties[3]
!mmm     end if
!mmm     if isdefault(cAmmoLabel)
!mmm       set cAmmoLabel = weaponProperties[4]
!mmm     end if
!mmm   end if
!mmm
!rem   // Fetch attacker data
!rem
!mmm   set effAttack = cOwnID.(findattr(cOwnID, "Angriff", "Waffe", cWeaponLabel, "WaffeEW"))
!mmm   set weaponDamageExpr = cOwnID.(findattr(cOwnID, "Angriff", "Waffe", cWeaponLabel, "WaffeSchaden"))
!mmm   set weaponDamageBonus = sign(cOwnID.(findattr(cOwnID, "Angriff", "Waffe", cWeaponLabel, "WaffeEfSchB")), "math")
!mmm   set sharpshootingSkill = cOwnID.(findattr(cOwnID, "Fertigkeiten", "Fertigkeit", "Scharfschießen", "FW"))
!mmm   if (not effAttack) or (not weaponDamageExpr)
!rem     // Most probably, a weapon called cWeaponLabel does not exist, so the script cannot work
!mmm     do whisperback("Abbruch: " & cOwnID.name & " hat keine Waffe namens " & cWeaponLabel & ".")
!mmm     exit script
!mmm   else if cMagicEnduranceCost > 0 and cOwnID.(m3mgdGetEnduranceAttribute(cOwnID)) < cMagicEnduranceCost
!mmm     do whisperback("Abbruch: " & cOwnID.name & " ist zu erschöpft für diesen magischen Angriff.")
!mmm     exit script
!mmm   end if
!rem
!rem   // Fetch target data
!rem
!mmm   set foeName = cTargetID.name
!mmm   if isdenied(foeName) or isunknown(foeName)
!mmm     set foeName = cFoeNameDefault
!mmm   end if
!mmm   set foeEndurance = cTargetID.bar2
!mmm
!rem   // - Fetch ammo properties
!mmm
!mmm   if count(cAmmoLabel) == 2 and cAmmoLabel[1] eq "∞"
!mmm     set ammoCount = "∞"
!mmm     set ammoLabel = cAmmoLabel[0]
!mmm   else if count(cAmmoLabel) == 1 and not isunknown(cOwnID.(cAmmoLabel))
!mmm     set ammoCount = cOwnID.(cAmmoLabel)
!mmm     set ammoLabel = cAmmoLabel
!mmm   else
!mmm     do whisperback("Abbruch: Munitionsattribut '" & cAmmoLabel & "' falsch definiert oder fehlt.")
!mmm     exit script
!mmm   end if
!mmm   if cAmmoMagic
!mmm     set magicAmmoCount = cOwnID.(cAmmoMagicLabel)
!mmm     if isunknown(magicAmmoCount)
!mmm       do whisperback("Abbruch: " & cOwnID.character_name & " fehlt ein Attribut für die magische Munition " & cAmmoMagicLabel & ".")
!mmm       exit script
!mmm     end if
!mmm     set ammoCount = magicAmmoCount
!mmm     set ammoLabel = cAmmoMagicLabel
!mmm   end if
!mmm   if ammoCount ne "∞" and ammoCount <= 0
!mmm     chat [OutOfAmmo]: Ich greife nach meinen ${ammoLabel}n, um auf ${foeName} zu schießen, doch **OH SCHRECK -- keine ${ammoLabel} mehr drin!** Schade. Da hat ${foeName} nochmal Glück gehabt.
!mmm     exit script
!mmm   end if
!mmm
!rem   // Calculate direction, exit if direction to target is outside arc of view 
!mmm   set myViewAngle = m3mgdGetViewAngle(cOwnID, cTargetID)
!mmm   if (myViewAngle < -45) or (myViewAngle > 45)
!mmm     chat [OutsideFieldOfVision]: $[targetName]{foeName} ist außerhalb meines Blickfeldes. Schade.
!mmm     exit script
!mmm   end if
!mmm   set foeViewAngle = m3mgdGetViewAngle(cTargetID, cOwnID)
!mmm
!rem   // Deduce ammo spent, if not magically unlimited
!mmm   if ammoCount ne "∞"
!mmm     set ammoCount = ammoCount - 1
!mmm     if not setattr(cOwnID, ammoLabel, ammoCount) == ammoCount
!mmm       do whisperback("Problem beim Speichern des neuen Munitionsvorrats in '" & cOwnID.name & "'." & ammoLabel)
!mmm     end if
!mmm     set ammoCount = highlight(getattr(cOwnID, ammoLabel), "info")
!mmm     set ammoMax = getattrmax(cOwnID, ammoLabel)
!mmm     if ammoCount < 1
!mmm       set ammoCount = highlight(ammoCount, "bad")
!mmm     else if ammoCount <= round(cAmmoWarnThreshold * ammoMax)
!mmm       set ammoCount = highlight(ammoCount, "important", "Nur noch " & ammoCount & "/" & ammoMax & " übrig")
!mmm     end if
!mmm   end if
!rem
!rem   // Calculate distance, exit if distance exceeds range
!mmm   set distance = m3mgdGetDistance(cOwnID, cTargetID)
!mmm   set distanceUnits = distunits() 
!mmm   if distance > cRangeUpperBoundFar
!mmm     combine chat
!mmm       chat [OutsideStrikeDistance]: $[targetName]{foeName} ist außerhalb der Reichweite ($[weaponLabel]{cWeaponLabel}: $[maxRange]{cRangeUpperBoundFar}). Schade.
!mmm       chat: Mein ${cAmmoLabel} fliegt grob in Richtung ${foeName}, der aber viel zu weit weg ist.
!mmm       chat: ${"&"}{template:default} {{name=${cWeaponLabel}: Außer Reichweite}} 
!mmm       chat: {{Ziel=**${foeName}**}}
!mmm       chat: {{Entfernung=${distance} ${distanceUnits} 
!mmm       chat: (${round(distance/(distsnap()*distscale()))} Planquadrate, **außerhalb der Reichweite: >${cRangeUpperBoundFar}m**)}}
!mmm       if ammoCount ne "∞"
!mmm         chat: {{${cAmmoLabel}=${ammoCount}}}
!mmm       end if
!mmm     end combine
!mmm     exit script
!mmm   end if
!rem
!rem   // Collect attack modifiers
!mmm   set modifiers = 0
!mmm   set autoModifiers = 0
!mmm   set semiAutoModifiers = 0
!mmm   set modifierLog = ""
!mmm   set modifierTooltip = ""
!rem   // If we have a magic weapon with a skill bonus, add that
!mmm   if cWeaponMagicSkillBonus
!mmm     set autoModifiers = autoModifiers + cWeaponMagicSkillBonus
!mmm     set modifierLog = modifierLog & " {{" & cWeaponLabel & "=EW" & sign(cWeaponMagicSkillBonus, "math") & "}} "
!mmm     set modifierTooltip = modifierTooltip & " " & cWeaponLabel & "&nbsp;&nbsp;&nbsp;EW" & sign(cWeaponMagicSkillBonus, "math") & "<br/> "
!mmm   end if
!rem   // If we have magic ammunition with a skill bonus, add that
!mmm   if cAmmoMagicSkillBonus
!mmm     set autoModifiers = autoModifiers + cAmmoMagicSkillBonus
!mmm     set modifierLog = modifierLog & " {{" & cAmmoMagicLabel & "=" & sign(cAmmoMagicSkillBonus, "math") & "}} "
!mmm     set modifierTooltip = modifierTooltip & " " & cAmmoMagicLabel & "&nbsp;&nbsp;&nbsp;" & sign(cAmmoMagicSkillBonus, "math") & "<br/> "
!mmm   end if
!rem   // 1. Distance
!mmm   if distance > cRangeUpperBoundMid
!mmm     set rangeBracket = "Fernbereich: " & (cRangeUpperBoundMid+1) & "-" & cRangeUpperBoundFar & "m"
!mmm     set rangeDescription = "großer Entfernung"
!mmm     set autoModifiers = autoModifiers - 4
!mmm     set modifierLog = modifierLog & " {{" & rangeBracket & "=-4}}"
!mmm     set modifierTooltip = modifierTooltip & " " & rangeBracket & "&nbsp;&nbsp;&nbsp;-4 "
!mmm   else if distance > cRangeUpperBoundClose
!mmm     set rangeBracket = "Mittelbereich: " & (cRangeUpperBoundClose+1) & "-" & cRangeUpperBoundMid & "m"
!mmm     set rangeDescription = "mittlerer Entfernung"
!mmm     set autoModifiers = autoModifiers - 2
!mmm     set modifierLog = modifierLog & " {{" & rangeBracket & "=-2}}"
!mmm     set modifierTooltip = modifierTooltip & " " & rangeBracket & "&nbsp;&nbsp;&nbsp;-2 "
!mmm   else
!mmm     set rangeBracket = "Nahbereich: 0-" & cRangeUpperBoundClose & "m"
!mmm     set rangeDescription = "geringer Entfernung"
!mmm     set modifierLog = modifierLog & " {{" & rangeBracket & "=+/-0}}"
!mmm     set modifierTooltip = modifierTooltip & " " & rangeBracket & "&nbsp;&nbsp;&nbsp;+/-0 "
!mmm   end if
!rem   // 2. Attacker's active status markers for exhaustion, injury etc.
!mmm   for activeMod in m3mgdActiveStatusModifiers(cOwnID, "rangedAttack")
!mmm     set autoModifiers = autoModifiers + activeMod.rollModifiers.rangedAttack
!mmm     set modifierLog = modifierLog & " {{" & activeMod.label & "=" & sign(activeMod.rollModifiers.rangedAttack, "display") & "}} "
!mmm     set modifierTooltip = modifierTooltip & " " & activeMod.label & "&nbsp;&nbsp;&nbsp;" & sign(activeMod.rollModifiers.rangedAttack, "display") & " "
!mmm   end for
!rem   // 3. Target exhausted
!mmm   if m3mgdIsExhausted(cTargetID)
!mmm     set autoModifiers = autoModifiers + 4
!mmm     set modifierLog = modifierLog & " {{Ziel erschöpft=+4}} "
!mmm     set modifierTooltip = modifierTooltip & " Ziel&nbsp;erschöpft&nbsp;&nbsp;&nbsp;+4 "
!mmm   end if
!rem   // 4. Finn's magic sword Whirlwind
!mmm   if (foeName eq "Finn" or foeName eq "Finn MacRathgar") and cTargetID.(m3mgdWhirlWindActiveMarker) eq "shown"
!mmm     set autoModifiers = autoModifiers - 4
!mmm     set modifierLog = modifierLog & " {{Wirbelwinds Wirbel-Winde=-4}} "
!mmm     set modifierTooltip = modifierTooltip & " Wirbelwinde&nbsp;&nbsp;&nbsp;-4 "
!mmm   end if
!rem   // 5. Collect additional standard modifiers from user via dropdown menu
!mmm   if cSemiManualModifiers % 23 == 0
!rem     // Check if PC has sharpshooting skill
!mmm     if not sharpshootingSkill
!mmm       do whisperback("Abbruch: " & cOwnID.name & " hat die Fertigkeit Scharfschießen nicht.")
!mmm       exit script
!mmm     end if
!mmm     set semiAutoModifiers = semiAutoModifiers + 4
!mmm     set modifierLog = modifierLog & " {{Scharfschießen=+4}} "
!mmm     set modifierTooltip = modifierTooltip & " Scharfschießen&nbsp;&nbsp;&nbsp;+4 "
!mmm   end if
!mmm   if cSemiManualModifiers % 19 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers + 4
!mmm     set modifierLog = modifierLog & " {{Sorgfältig gezielt=+4}} "
!mmm     set modifierTooltip = modifierTooltip & " Sorgfältig&nbsp;gezielt&nbsp;&nbsp;&nbsp;+4 "
!mmm   end if
!mmm   if cSemiManualModifiers % 17 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers + 4
!mmm     set modifierLog = modifierLog & " {{Angriff ins Handgemenge=+4}} "
!mmm     set modifierTooltip = modifierTooltip & " Angriff&nbsp;ins&nbsp;Handgemenge&nbsp;&nbsp;&nbsp;+4 "
!rem     // TODO: Remind user to throw dice to identify actual target!
!mmm   end if
!mmm   if cSemiManualModifiers % 13 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers - 2
!mmm     set modifierLog = modifierLog & " {{Schnelles Ziel=-2}} "
!mmm     set modifierTooltip = modifierTooltip & " Schnelles&nbsp;Ziel&nbsp;&nbsp;&nbsp;-2 "
!mmm   end if
!mmm   if cSemiManualModifiers % 11 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers - 4
!mmm     set modifierLog = modifierLog & " {{Spontaner Angriff=-4}} "
!mmm     set modifierTooltip = modifierTooltip & " Spontaner&nbsp;Angriff&nbsp;&nbsp;&nbsp;-4 "
!mmm   end if
!mmm   if cSemiManualModifiers % 7 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers + 4
!mmm     set modifierLog = modifierLog & " {{Riesiges Ziel=+4}} "
!mmm     set modifierTooltip = modifierTooltip & " Riesiges&nbsp;Ziel&nbsp;&nbsp;&nbsp;+4 "
!mmm   end if
!mmm   if cSemiManualModifiers % 5 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers + 2
!mmm     set modifierLog = modifierLog & " {{Großes Ziel=+2}} "
!mmm     set modifierTooltip = modifierTooltip & " Großes&nbsp;Ziel&nbsp;&nbsp;&nbsp;+2 "
!mmm   end if
!mmm   if cSemiManualModifiers % 3 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers - 2
!mmm     set modifierLog = modifierLog & " {{Kleines/halb verdecktes Ziel=-2}} "
!mmm     set modifierTooltip = modifierTooltip & " Kleines/halb&nbsp;verdecktes&nbsp;Ziel&nbsp;&nbsp;&nbsp;-2 "
!mmm   end if
!mmm   if cSemiManualModifiers % 2 == 0
!mmm     set semiAutoModifiers = semiAutoModifiers -4
!mmm     set modifierLog = modifierLog & " {{Sehr kleines Ziel=-4}} "
!mmm     set modifierTooltip = modifierTooltip & " Sehr&nbsp;kleines&nbsp;Ziel&nbsp;&nbsp;&nbsp;-4 "
!mmm   end if
!rem   // Process manual modifiers and sum up the various modifiers
!mmm   if cManualModifiers != 0
!mmm     set modifierLog = modifierLog & " {{Benutzereingabe=" & sign(cManualModifiers, "display") & "}} "
!mmm     set modifierTooltip = modifierTooltip & " Benutzereingabe&nbsp;&nbsp;&nbsp;" & sign(cManualModifiers, "display") & " "
!mmm   end if
!mmm   set modifiers = modifiers + autoModifiers + semiAutoModifiers + cManualModifiers
!rem
!rem   // Check for attack from behind
!mmm   if (foeViewAngle < -135) or (foeViewAngle > 135)
!mmm     set attackFromBehind = true
!mmm   else
!mmm     set attackFromBehind = false
!mmm   end if
!mmm
!rem   // Run & format rolls
!rem
!mmm   if cSemiManualModifiers % 23 == 0
!rem     // Sharpshooting: if one of the two rolls is a critical successes, the other gets +4
!mmm     set customizable cSharpExtraRoll = roll("1d20")
!mmm     if iscritical(cSharpExtraRoll) and not iscritical(cAttackRoll) and not isfumble(cAttackRoll)
!mmm       set modifiers = modifiers + 4
!mmm       set modifierLog = modifierLog & " {{Kritischer Erfolg Scharfschießen=+4}} "
!mmm     else if iscritical(cAttackRoll) and not iscritical(cSharpExtraRoll) and not isfumble(cSharpExtraRoll)
!mmm       set sharpExtraResult = rollResult(cSharpExtraRoll, effAttack, { "Modifikatoren": modifiers - 4, "FW:Scharfschießen": sharpshootingSkill, "Krit.Erfolg": 4 } )
!mmm     else
!mmm       set sharpExtraResult = rollResult(cSharpExtraRoll, effAttack, { "Modifikatoren": modifiers - 4, "FW:Scharfschießen": sharpshootingSkill } )
!mmm     end if
!mmm   end if
!mmm   set attackResult = rollResult(cAttackRoll, effAttack, modifiers)
!mmm   set modifiers = highlight(sign(modifiers, "display"), "info", modifierTooltip)
!mmm   if modifierLog eq ""
!mmm     set modifierLog = "{{Boni/Mali=keine}}"
!mmm   end if
!mmm   set criticalAttack = iscritical(cAttackRoll)
!mmm 
!mmm   if attackResult >= 20 and not isfumble(cAttackRoll)
!rem     // Damage roll: override in customize block
!mmm     set customizable cDamageRoll = roll(weaponDamageExpr)
!mmm     set damageResult = cDamageRoll + weaponDamageBonus
!mmm     set damageResultLog = "(" & weaponDamageExpr & " = " & cDamageRoll & ") " & weaponDamageBonus
!rem     // damageResult must not become negative, even for puny weapons causing 1d6-4 damage
!mmm     if damageResult < 0
!mmm       set damageResult = highlight(0, "bad")
!mmm     end if
!rem     // Critical successes maximize damage
!mmm     if iscritical(cAttackRoll)
!mmm       set cDamageRoll = rollMax(weaponDamageExpr)
!mmm       set damageResult = cDamageRoll + weaponDamageBonus
!mmm       if cDamageRoll == undef 
!mmm         do whisperback(scriptVersion & ": No maximum roll found for " & weaponDamageExpr & ", setting damage to 99")
!mmm         set cDamageRoll = 99
!mmm       end if
!mmm       set damageResultLog = "(" & weaponDamageExpr & "[max] = " & cDamageRoll & ") " & weaponDamageBonus
!mmm     end if
!mmm     set damageResultBasic = highlight(damageResult, damageResult, damageResultLog)
!rem     // Special case: sharpshooting
!mmm     set sharpExtraDamage = 0
!mmm     if cSemiManualModifiers % 23 == 0 and sharpExtraResult >= 20
!mmm       set sharpExtraDamage = round(sharpExtraResult * .1)
!mmm       set damageResult = damageResult + sharpExtraDamage
!mmm       set damageResultLog = damageResultLog & " + (Scharfschuss-Bonus = " & sharpExtraDamage & ")"
!mmm     end if
!rem     // Special case: magic ammunition with extra damage
!mmm     if cAmmoMagic and cAmmoMagicDamage ne ""
!mmm       set cMagicExtraDamageRoll = roll(cAmmoMagicDamage)
!mmm       if cMagicExtraDamageRoll < 0
!mmm         set cMagicExtraDamageRoll = highlight(0, "bad")
!mmm       end if
!mmm       set damageResult = damageResult + cMagicExtraDamageRoll
!mmm       set damageResultLog = damageResultLog & " + (" & cAmmoMagicDamage & " = " & cMagicExtraDamageRoll & emojiMagic & ")"
!mmm     end if 
!rem     // Complete damage variables
!mmm     set damageResultLog = damageResult & " = " & damageResultLog
!mmm     set damageResult = highlight(damageResult, default, damageResultLog)
!mmm   end if
!mmm
!rem   // Break down extra magic damage to player and GM
!mmm   if cAmmoMagic and attackResult >= 20 and not isfumble(cAttackRoll) and damageResult > 0
!mmm     set modifierLog = modifierLog & " {{Zauberschaden=" & damageResult & " }} "
!mmm   end if
!mmm
!rem   // Pull together a sensible guess at a default way of addressing the weapon for output
!mmm   if cWeaponName eq ""
!mmm     set outputWeaponLabel = cWeaponLabel
!mmm   else
!mmm     set outputWeaponLabel = cWeaponType[0] & " *" & cWeaponName & "*"
!mmm   end if
!mmm
!mmm
!mmm   if cVerbose
!mmm     combine chat
!rem       // Check if script is run for an NPC (whisper data to GM only)
!mmm       if cGMSilentMode
!mmm         chat: /w GM 
!mmm       end if
!mmm       if not cAmmoMagic
!mmm         chat [AttackOpening]:              Angriff mit dem $[weaponLabel]{outputWeaponLabel} ($[weaponType]{cWeaponType[0]} "$[weaponName]{cWeaponName}"): Einer/s meiner/s $[ammoLabel]{ammoLabel} fliegt in Richtung $[targetName]{foeName} in $[range]{rangeDescription} und
!mmm       else
!mmm         chat [AttackOpeningMagicDamage]:   Mein Angriff mit $[weaponLabel]{outputWeaponLabel} ($[weaponType]{cWeaponType[0]} "$[weaponName]{cWeaponName}", magischer Zusatzschaden aktiviert) auf $[targetName]{foeName} 
!mmm       end if
!mmm       if criticalAttack
!mmm         chat [AttackIsCriticalSuccess]:    ist ein **kritischer Erfolg** ($[attackResult]{attackResult+0}). 
!mmm       else if isfumble(cAttackRoll)
!mmm         chat [AttackIsCriticalFailure]:    ist ein **grausamer Patzer**. 
!mmm       else if attackResult >= 22
!mmm         chat [AttackSucceedsWell]:         scheint ein ordentlicher Treffer zu werden ($[attackResult]{attackResult+0}), wenn $[targetName]{foeName} die Abwehr nicht gelingt.
!mmm       else if attackResult >= 20
!mmm         chat [AttackSucceedsBarely]:       trifft gerade so ($[attackResult]{attackResult+0}), wenn $[targetName]{foeName} die Abwehr nicht gelingt.
!mmm       else if attackResult >= 18
!mmm         chat [AttackFailsBarely]:          verfehlt sein Ziel knapp ($[attackResult]{attackResult+0}). $[targetName]{foeName} muss nicht ausweichen, aber **steht dahinter noch jemand?**
!mmm       else
!mmm         chat [AttackFailsClearly]:         verfehlt sein Ziel ($[attackResult]{attackResult+0}). $[targetName]{foeName} muss nicht einmal ausweichen.
!mmm       end if
!mmm       if attackResult >= 20 and sharpExtraDamage
!mmm         chat [AttackSuccessSharpshooting]: Der wird wehtun: die vielen, vielen Stunden mit der Zielscheibe haben sich mal wieder ausgezahlt.
!mmm       end if
!mmm       if attackResult >= 20 and cAmmoMagic
!mmm         chat [AttackSuccessClosingMagic]:  Au weia, da erwischt $[targetName]{foeName} auch Zauberschaden, wenn die Abwehr nicht gelingt.
!mmm       else if attackResult >= 20 and (not cAmmoMagic)
!mmm         chat [AttackSuccessClosing]:       $[targetName]{foeName} kann nun abwehren.
!mmm       else
!mmm         chat [AttackFailureClosing]:       $[targetName]{foeName} war zu keinem Zeitpunkt in Gefahr.
!mmm       end if
!mmm     end combine
!mmm   end if
!rem
!rem   // Add data table for easy reference
!mmm   combine chat
!rem     // Check if script is run for an NPC (whisper data to GM only)
!mmm     if cGMSilentMode
!mmm       chat: /w GM 
!mmm     end if
!mmm     if cSemiManualModifiers % 23 == 0
!mmm       set sharpShootingInsert = " (🎯 Scharfschießen) "
!mmm     end if
!mmm     chat:      ${"&"}{template:default} {{name=${cOwnID.name}: Fernkampfangriff ${sharpShootingInsert} mit ${cWeaponType[0]} * ${cWeaponName} *
!mmm     do chat(m3mgdRerunButton(cOwnID, "ranged", cWeaponLabel, {"cAttackRoll": cAttackRoll, "cDamageRoll": cDamageRoll, "cSharpExtraRoll": cSharpExtraRoll, "cMagicExtraDamageRoll": cMagicExtraDamageRoll}))
!mmm     chat:      }} 
!mmm     chat:      {{Ziel=**${foeName}** ${m3mgdShapeMoji(cTargetID)}}}
!mmm     if iscritical(cAttackRoll) and cSemiManualModifiers % 23 == 0
!mmm       chat:    {{Kritischer Erfolg=${attackResult}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🎯${sharpExtraResult}}}
!mmm     else if attackResult >= 20 and cSemiManualModifiers % 23 == 0
!mmm       chat:    {{Erfolg=${attackResult}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🎯${sharpExtraResult}}}
!mmm     else if iscritical(cAttackRoll) and cSemiManualModifiers % 23 != 0
!mmm       chat:    {{Kritischer Erfolg=${attackResult} }}
!mmm     else if isfumble(cAttackRoll)
!mmm       chat:    {{Kritischer Fehlschlag=${attackResult} [🎲](${m3mgdCriticalEffectRollPayload(cOwnID, "rangedAttackFailure", cTargetID)}${cssTableCellButton}) }}
!mmm     else if attackResult >= 20
!mmm       chat:    {{Erfolg=${attackResult}}}
!mmm     else 
!mmm       chat:    {{Fehlschlag=${attackResult}}}
!mmm     end if
!mmm     if cSemiManualModifiers % 23 == 0 and attackResult >= 20 and not isfumble(cAttackRoll)
!mmm       chat:      {{Boni/Mali=${modifiers}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🎯${highlight(sign(modifiers-4,"display"),"info")}}}
!mmm     else
!mmm       chat:      {{Boni/Mali=${modifiers}}}
!mmm     end if
!mmm     chat:      {{Entfernung=${distance} ${distanceUnits} (${round(distance/(distsnap()*distscale()))} Planquadrate, ${rangeBracket})}}
!mmm     if attackFromBehind
!mmm       chat:    {{Angriff von hinten=Bei Hinterhalt **kein Abwehrwurf** (${foeViewAngle}°)}}
!mmm     end if 
!mmm     if attackResult >= 20 and not isfumble(cAttackRoll) and cSemiManualModifiers % 23 == 0 and not isfumble(sharpExtraResult)
!mmm       if (attackResult >= 40 and sharpExtraResult >= 40)
!mmm         chat:  {{Schaden=🎯 HAMMMER!! <1cm genau: 💀&nbsp;oder&nbsp;${damageResult}}}
!mmm       else if (attackResult >= 30 and sharpExtraResult >= 30) or (iscritical(cAttackRoll) and iscritical(cSharpExtraRoll))
!mmm         chat:  {{Schaden=🎯 AUGE! 💀&nbsp;oder&nbsp;${damageResult}}}
!mmm       else if attackResult >= 25 and sharpExtraResult >= 25
!mmm         chat:  {{Schaden=🎯 Zentrum: 💀&nbsp;oder&nbsp;${damageResult}}}
!mmm       else 
!mmm         chat:  {{Schaden=${damageResult} 🎯&nbsp;${(25-min(attackResult, sharpExtraResult))*5}cm&nbsp;daneben}}
!mmm       end if
!mmm     else if attackResult >= 20 and not isfumble(cAttackRoll)
!mmm       chat:    {{Schaden=${damageResult}}}
!mmm     end if
!mmm     if ammoCount ne "∞"
!mmm       chat:    {{${ammoLabel}=${ammoCount}}}
!mmm     end if
!mmm   end combine
!mmm
!rem   // If present, reduce counters for attack-specific modifier effects
!mmm   set endOfActionSummary = m3mgdUpdatePersistentEffectsCounters(cOwnID, "attack")
!mmm   if endOfActionSummary
!mmm     set modifierLog = modifierLog & " {{ Angriffszähler=" & endOfActionSummary & " }}"
!mmm   end if
!mmm
!mmm   if modifierLog ne "{{Boni/Mali=keine}}"
!mmm     chat: /w "${cOwnID.character_name}" ${"&"}{template:default} ${modifierLog}
!mmm   end if
!mmm
!mmm   if attackResult >= 20 and not isfumble(cAttackRoll)
!mmm
!rem     // Save key attack data for defense script
!mmm     set attackData = { origin: cOwnID.token_id, target: cTargetID.token_id, action: "combatAttack", attackType: "ranged", attackResult: attackResult }
!mmm     set attackData = { attackData, criticalAttack: criticalAttack, damageResult: damageResult, damageRoll: cDamageRoll, weaponType: cWeaponType, weaponLabel: cWeaponLabel }
!mmm     if cMagicEnduranceCost
!mmm       set attackData = { attackData, magicEnduranceCost: cMagicEnduranceCost }
!mmm     end if
!mmm     if not m3mgdStoreAttack(attackData) 
!mmm       do whisperback("Problem bei der Datenablage für das Abwehrskript; Angriffsdaten bitte manuell ergänzen.")
!mmm     end if
!mmm     do m3mgdChatDefensePrompt(attackData)
!mmm
!rem   // Injury & exhaustion special effects
!mmm   else if cMagicEnduranceCost > 0
!mmm     do m3mgdInjuryFX(cOwnID, 0, cMagicEnduranceCost / cOwnID.(m3mgdGetEnduranceAttribute(cOwnID)).max)
!mmm   end if
!mmm
!rem   // Batch attacks by NPCs: mark attack as executed, offer Go! button for next attack
!mmm   do m3mgdBatchCombatUpdate(cOwnID, cTargetID)
!mmm
!mmm end script