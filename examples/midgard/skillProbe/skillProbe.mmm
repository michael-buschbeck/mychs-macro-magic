!rem // skillProbe
!rem //
!rem // GM script to execute group probes on skills, privately show results and whisper tailored messages to players based on their probe results.
!rem //
!mmm script
!mmm   set scriptVersion = "skillProbe 1.2.6 (2024-07-12)"
!rem
!rem   // MMM compatibility check: die if MMM version too low
!mmm   if version < 1.24
!mmm     do whisperback("Abbruch: MMM-Version 1.24.0 oder h√∂her erforderlich.")
!mmm     exit script
!mmm   end if
!rem
!mmm   set scriptCommand = literal("%" & "{MacroSheet|skillProbe}")
!mmm   set usableSkills = "Alchemie", "F√§lschen", "Fallen entdecken", "Fallenmechanik", "Gassenwissen", "Heilkunde", "Landeskunde (Alba)", "Menschenkenntnis", "Naturkunde", "Pflanzenkunde", "Schleichen", "Spurensuche", "Tarnen", "Tierkunde", "√úberleben (Wald)", "Verh√∂ren", "Zauberkunde"
!mmm
!rem   // Output formatting constants
!mmm   set playerMsgEmoji = "üñÖ"
!mmm   set colorCritSuccess = "#58b53c"
!mmm   set colorSuccess = "#88f268"
!mmm   set colorFailure = "#d95d86"
!mmm   set colorCritFailure = "#a8204d"
!mmm   set colorInactive = "#adadad"
!rem
!rem   // FUNCTIONS
!rem   //
!mmm   function tokenMenu()
!mmm     
!mmm     set skillSelectQuery = "?" & "{" & "Fertigkeit ausw√§hlen"
!mmm     for skill in usableSkills
!mmm       set skillSelectQuery = skillSelectQuery & "|" & skill & "," & skill
!mmm     end for
!mmm     set skillSelectQuery = skillSelectQuery & "}"
!mmm     set manualModifierQuery = "?" & "{" & "Modifikator|0" & "}"
!mmm
!mmm     for charName in m3mgdPlayerCharacters
!mmm       set autoTokenList = autoTokenList, charName
!mmm     end for
!mmm     set buttonProps = { label: "**Ausgew√§hlte Token**", bgColor: "#e10085", textColor: "#ffffff", payload: chatButtonPayload(script.scriptCommand, { "cATokenList": "selected", "cBSkill": "\"" & skillSelectQuery & "\"", "cCModifier": manualModifierQuery }) }
!mmm     set buttonProps = buttonProps, { label: "**Ganze Gruppe**", bgColor: "#e10085", textColor: "#ffffff", payload: chatButtonPayload(script.scriptCommand, { "cATokenList": stringify(autoTokenList), "cBSkill": "\"" & skillSelectQuery & "\"", "cCModifier": manualModifierQuery }) }
!mmm     
!mmm     set output = chatTightBoxHeader("Fertigkeitspr√ºfung f√ºr...") & chatTightBoxMultiButton(buttonProps)
!mmm     do whisperback(output)
!mmm     
!mmm   end function
!mmm
!mmm   function postOffice()
!mmm
!mmm     for recipientToken in script.cRecipientList
!mmm       set rcptMessage = chatTightBoxSubHeader("Nachricht vom Spielleiter") & chatTightBoxRow(script.cPlayerMessage)
!mmm       do chat("/w \"" & recipientToken.character_name & "\" " & rcptMessage)
!mmm       set rcptNames = rcptNames, recipientToken.character_name
!mmm     end for
!mmm
!mmm     set output = chatTightBoxSubHeader("Nachrichten verschickt:")
!mmm     set output = output & chatTightBoxRow(script.playerMsgEmoji & " " & stringify(rcptNames, "", ", ") & ": \"" & script.cPlayerMessage & "\"")
!mmm
!mmm     do whisperback(output)
!mmm
!mmm   end function
!mmm
!rem   // MAIN
!rem   
!rem   // Config: set defaults for customizable variables
!rem   //
!rem   //  cCheckVersion    Toggle version check
!rem   //  cBSkill          A skill as listed in the character sheet (column "Fertigkeit" [or "Fertigkeit2"?])
!rem   //  cCModifier       Modifier to the skill roll
!rem   //  cATokenList      List of valid token_id or character_id values for characters that get the sense rolls. Duplicates are ignored.
!rem   //    A, B, C serve to maintain the right order for chatButton() in libBasics
!rem   //  cPlayerMessage   Message to be whispered to everyone in...
!rem   //  cRecipientList   ...the list of recipient token/character IDs/names
!rem   //
!mmm   set customizable cCheckVersion = false
!mmm   set customizable cATokenList = default
!mmm   set customizable cBSkill = default
!mmm   set customizable cCModifier = default
!mmm   set customizable cPlayerMessage = default
!mmm   set customizable cRecipientList = default
!mmm
!mmm   if cCheckVersion
!mmm     do whisperback(scriptVersion)
!mmm     exit script
!mmm   end if
!mmm
!rem   // Called without proper config -> show menu
!rem   //
!mmm   if isdefault(cATokenList) and isdefault(cRecipientList)
!mmm     do tokenMenu()
!mmm     exit script
!mmm   end if
!mmm   
!rem   // Called with whisper output to deliver -> do so
!rem   //
!mmm   if not isdefault(cRecipientList)
!mmm     do postOffice()
!mmm     exit script
!mmm   end if
!mmm
!rem   // Due diligence: weed out duplicate tokens, in case cTokenList was populated manually or via {target}
!mmm   for item in cATokenList
!mmm 
!mmm     if not isunknown(item.token_id) and not isdenied(item.token_id)
!mmm       set id = item.token_id
!mmm     else
!mmm       if not isdenied(item.character_name)
!mmm         set item = item.character_name
!mmm       end if
!mmm       set id = "'" & item & "' (kein Token)"
!mmm     end if
!mmm     set dupeFound = false
!mmm     for trimmedId in trimmedTokenList
!mmm       if trimmedId eq id
!mmm         set dupeFound = true
!mmm       end if
!mmm     end for
!mmm     if not dupeFound
!mmm       set trimmedTokenList = trimmedTokenList, id
!mmm     end if
!mmm   end for
!rem
!mmm   set output = chatTightBoxHeader(cBSkill)
!mmm   set output = output & " " & chatTightBoxSubHeader("W√ºrfe f√ºr...")
!mmm     
!rem     // Run through selected characters
!mmm     for id in trimmedTokenList
!mmm
!rem       // Initialize: refetch token ID and get name and skills
!mmm       set tokenID = id.token_id
!mmm
!mmm       set tokenEffSkill = tokenID.(findattr(tokenID, "fertigkeiten", "Fertigkeit", cBSkill, "FW")) + tokenID.(findattr(tokenID, "fertigkeiten", "Fertigkeit", cBSkill, "Fertigkeitsbonus")) + roll(tokenID, tokenID.(findattr(tokenID, "fertigkeiten", "Fertigkeit", cBSkill, "LeitE")))
!mmm       set tokenModifier = cCModifier
!mmm       set fallBack = ""
!mmm
!rem       // If skill is missing, try to default to the unlearned version
!mmm       if not tokenEffSkill and not isunknown(tokenID) and not isdenied(tokenID)
!mmm       
!mmm         set tokenEffSkill = tokenID.(findattr(tokenID, "fertigkeiten2", "Fertigkeit2", cBSkill & " (Ungelernt)", "FW2")) + roll(tokenID.(findattr(tokenID, "fertigkeiten2", "Fertigkeit2", cBSkill, "LeitE2")))
!mmm         if not isunknown(tokenEffSkill) and tokenEffSkill > 0
!mmm           set fallBack = " (ungelernt)"
!mmm         end if
!mmm       
!mmm       end if
!mmm       
!rem       // Error handling
!mmm       if isdenied(tokenID) or isunknown(tokenID)
!mmm         
!mmm         set skippedList = skippedList, id
!mmm         
!mmm       else if not tokenEffSkill or tokenEffSkill == 0
!mmm         
!mmm         set skippedList = skippedList, (tokenID.token_name & ": '" & cBSkill & "'‚ùå") 
!mmm         
!rem       // And if everything is ready...
!mmm       else
!mmm         
!rem         // Execute skill roll
!mmm         set effModifier = sign(tokenEffSkill + tokenModifier, "math")
!mmm         set tokenRoll = roll("1d20")
!mmm         set tokenResult = tokenRoll + effModifier
!mmm         
!rem         // Build tooltip to break down components
!mmm         set tokenResultTooltip = tokenResult & " = (1d20 = " & tokenRoll & ") + (EW = " & tokenEffSkill & ") " & sign(tokenModifier, "display")
!mmm         
!rem         // Organize results and output table row for GM
!mmm         if iscritical(tokenRoll)
!mmm           set critSuccessList = critSuccessList, tokenID
!mmm           if fallBack eq ""
!mmm             set tokenXPGain = m3mgdProcessSkillXP(cBSkill, tokenRoll, tokenID)
!rem             // CHECK: What about PPs?
!mmm             set output = output & chatTightBoxRow(tokenID.token_name & " **" & tokenResult & "** &nbsp; EP: " & tokenXPGain, literal(tokenResultTooltip), colorCritSuccess)
!mmm           else
!mmm             set output = output & chatTightBoxRow(tokenID.token_name & fallback & " **" & tokenResult & "** &nbsp; (keine EP)", literal(tokenResultTooltip), colorCritSuccess)
!mmm           end if
!mmm         else if tokenResult >= 20
!mmm           set successList = successList, tokenID
!mmm           if fallBack eq ""
!mmm             set tokenXPGain = m3mgdProcessSkillXP(cBSkill, tokenRoll, tokenID)
!mmm             set output = output & chatTightBoxRow(tokenID.token_name & " **" & tokenResult & "** &nbsp; EP: " & tokenXPGain, literal(tokenResultTooltip), colorSuccess)
!mmm           else
!mmm             set output = output & chatTightBoxRow(tokenID.token_name & fallback & " **" & tokenResult & "** &nbsp; (keine EP)", literal(tokenResultTooltip), colorSuccess)
!mmm           end if
!mmm         else if isfumble(tokenRoll)
!mmm           set critFailList = critFailList, tokenID
!mmm           set output = output & chatTightBoxRow(tokenID.token_name & fallback & " **" & tokenResult & "**", literal(tokenResultTooltip), colorCritFailure)
!mmm         else 
!mmm           set failureList = failureList, tokenID
!mmm           set output = output & chatTightBoxRow(tokenID.token_name & fallback & " **" & tokenResult & "**", literal(tokenResultTooltip), colorFailure)
!mmm         end if
!mmm
!mmm       end if
!mmm       
!mmm     end for
!mmm
!rem     // Tell GM which selected characters were skipped
!mmm     if skippedList
!mmm         
!mmm       set output = output & chatTightBoxSubHeader("Keine W√ºrfe f√ºr...")
!mmm         
!mmm       for skippedItem in skippedList
!mmm         
!mmm         if skippedItem
!mmm         
!mmm           set output = output & chatTightBoxRow(skippedItem)
!mmm         
!mmm         end if
!mmm         
!mmm       end for
!mmm         
!mmm     end if
!mmm
!rem     // Buttons for whispering information to players depending on their skillProbe results
!mmm     set critSuccessQuery = "'?" & "{Spielerinfo bei kritischem Erfolg|}'"
!mmm     set successQuery = "'?" & "{Spielerinfo bei Erfolg|}'"
!mmm     set failureQuery = "'?" & "{Spielerinfo bei Misserfolg|}'"
!mmm     set critFailureQuery = "'?" & "{Spielerinfo bei kritischem Misserfolg|}'"
!mmm     if count(critSuccessList) > 0
!mmm       set multiButtonProps = { label: count(critSuccessList) & " krit. üçë", bgColor: colorCritSuccess, textColor: "#000000", payload: chatButtonPayload(scriptCommand, { "cPlayerMessage": critSuccessQuery, "cRecipientList": stringify(critSuccessList, '"', ",") }) }
!mmm     else 
!mmm       set multiButtonProps = { label: "0 krit.üçë", bgColor: colorInactive, textColor: "#000000", payload: "#" }
!mmm     end if 
!mmm     if count(successList) > 0
!mmm       set multiButtonProps = multiButtonProps, { label: count(successList) & "üçë", bgColor: colorSuccess, payload: chatButtonPayload(scriptCommand, { "cPlayerMessage": successQuery, "cRecipientList": stringify(successList, '"', ",") }) } 
!mmm     else 
!mmm       set multiButtonProps = multiButtonProps, { label: "0 üçë", bgColor: colorInactive, textColor: "#000000", payload: "#" }
!mmm     end if 
!mmm     if count(failureList) > 0
!mmm       set multiButtonProps = multiButtonProps, { label: count(failureList) & "üçã", bgColor: colorFailure, payload: chatButtonPayload(scriptCommand, { "cPlayerMessage": failureQuery, "cRecipientList": stringify(failureList, '"', ",") }) }
!mmm     else 
!mmm       set multiButtonProps = multiButtonProps, { label: "0 üçã", bgColor: colorInactive, textColor: "#000000", payload: "#" }
!mmm     end if 
!mmm     if count(critFailList) > 0
!mmm       set multiButtonProps = multiButtonProps, { label: count(critFailList) & " krit.üçã", bgColor: colorCritFailure, textColor: "#000000", payload: chatButtonPayload(scriptCommand, { "cPlayerMessage": critFailureQuery, "cRecipientList": stringify(critFailList, '"', ",") }) }
!mmm     else 
!mmm       set multiButtonProps = multiButtonProps, { label: "0 krit.üçã", bgColor: colorInactive, textColor: "#000000", payload: "#" }
!mmm     end if 
!mmm     set output = output & chatTightBoxMultiButton(multiButtonProps)
!mmm         
!mmm   do whisperback(output)
!mmm
!mmm end script