!mmm script
!mmm
!mmm
!mmm function m3mgdCheckStatusEffect(tokenID, effect)
!mmm
!mmm   if tokenID.m3mgdActiveCriticalEffects
!mmm
!mmm     set activeEffects = deserialize(cOwnID.m3mgdActiveCriticalEffects)
!mmm
!mmm     for statusRule in activeEffects
!mmm       if statusRule.effect.(effect)
!mmm         set effectStatusList = effectStatusList, statusRule.label & ": " & statusRule.effect.(effect)
!mmm       end if
!mmm       if statusRule.effect.rollModifiers.(effect)
!mmm         set effectStatusList = effectStatusList, statusRule.label & ": " & statusRule.effect.rollModifiers.(effect)
!mmm       end if
!mmm     end for
!mmm     
!mmm     for statusRule in m3mgdInjuryStatus... where cOwnID.("status_" & ...key) eq "shown"
!mmm       if statusRule.value.noAttack
!mmm         set effectStatusList = effectStatusList, statusRule.value.icon & statusRule.value.label
!mmm       end if
!mmm     end for
!mmm
!mmm   end if
!mmm
!mmm   return effectStatusList
!mmm 
!mmm end function
!mmm
!mmm function checkPreActionBlock(tokenID, action)
!mmm   chat: Checking for ${action}: ${m3mgdCheckStatusEffect(tokenID, action)}
!mmm end function
!mmm
!mmm function updatePersistentEffectsCounters(tokenID, actionType)
!mmm   if not tokenID.m3mgdActiveCriticalEffects
!mmm     debug chat: no active effects found.
!mmm     return false
!mmm   end if
!mmm
!mmm   for activeEffect in deserialize(tokenID.m3mgdActiveCriticalEffects)
!mmm     if activeEffect.effect.expiry and activeEffect.effect.expiry.type eq actionType
!mmm       if actionType eq "round" and activeEffect.effect.expiry.new 
!mmm         set activeEffect = { activeEffect, effect: { activeEffect.effect, expiry: { activeEffect.effect.expiry... where ...key ne "new" } } }
!mmm       else if activeEffect.effect.expiry.count > 1
!mmm         set activeEffect = { activeEffect, effect: { activeEffect.effect, expiry: { activeEffect.effect.expiry, count: activeEffect.effect.expiry.count - 1 } } }
!mmm       else
!mmm         if activeEffect.effect.cappedAttribute
!mmm           do setattr(tokenID, activeEffect.effect.cappedAttribute, tokenID.(activeEffect.effect.cappedAttribute).max)
!mmm         end if
!mmm         if activeEffect.effect.marker
!mmm           do setattr(tokenID, activeEffect.effect.marker, false)
!mmm         end if
!mmm         set activeEffect = undef
!mmm         if tokenID.status_blue > 1
!mmm           do setattr(tokenID, "status_blue", tokenID.status_blue - 1)
!mmm         else
!mmm           do setattr(tokenID, "status_blue", false)
!mmm         end if 
!mmm         debug chat: one effect expired
!mmm       end if
!mmm     end if
!mmm     if activeEffect
!mmm       set updatedActiveEffects = updatedActiveEffects, activeEffect
!mmm     end if
!mmm   end for
!mmm   do setattr(tokenID, "m3mgdActiveCriticalEffects", serialize(updatedActiveEffects))
!mmm
!mmm end function
!mmm
!mmm
!rem // MAIN
!mmm   set cOwnID = selected.token_id
!mmm
!mmm   chat: =======
!mmm   combine chat
!mmm   chat: run through events for ${cOwnID.name}
!mmm   chat: pre-action event
!mmm   for action in "noAttack", "noDefense", "noFocusedDefense"
!mmm     do checkPreActionBlock(cOwnID, action)
!mmm   end for
!mmm
!mmm   chat: rollModifiers event
!mmm   for action in "meleeAttack", "rangedAttack", "defense"
!mmm     for activeEffect in m3mgdCheckStatusEffect(cOwnID, action)
!mmm       chat: ${action} - Found ${activeEffect}
!mmm     end for
!mmm   end for
!mmm
!mmm   chat: end of attack event
!mmm   do updatePersistentEffectsCounters(cOwnID, "attack")
!mmm   chat: end of defense event
!mmm   do updatePersistentEffectsCounters(cOwnID, "defense")
!mmm
!mmm   chat: end of round event
!mmm   do updatePersistentEffectsCounters(cOwnID, "round")
!mmm   end combine
!mmm   debug do cOwnID.m3mgdActiveCriticalEffects
!mmm end script