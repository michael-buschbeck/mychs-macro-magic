!rem // libBasics: Basic MMM utility functions
!rem // 
!rem // _libMidgardBasics()
!rem // 
!rem //   Initializer and publisher function. Call once from autorun.
!rem //
!mmm function _libMidgardBasics()
!mmm   
!mmm   set libVersion = "libMidgardBasics v1.0.0 (2022-02-25)"
!mmm   set sender = "MacroSheetLibrary"
!mmm
!rem   // Publish game-global functions defined below
!rem
!mmm   publish to game: count, isChar, sign, stringify, rollResult
!mmm
!mmm   chat: ${libVersion} loaded.
!mmm   
!mmm end function
!rem
!rem // 
!rem // count(list) counts the number of items in list
!rem // 
!mmm function count(list)
!mmm   if isdefault(list)
!mmm     return false
!mmm   end if
!mmm   set count = 0
!mmm   for item in list
!mmm     set count = count + 1
!mmm   end for
!mmm   return count
!mmm end function
!rem
!rem // isChar(id) returns true if id is either a character id itself or a token id linked to a character sheet, otherwise false.
!rem //
!mmm function isChar(id)
!rem   // Tokens unlinked to a char sheet return unknown while player ids return denied
!mmm   if not isunknown(id.character_id) and not isdenied(id.character_id)
!mmm     return true
!mmm   else
!mmm     return false
!mmm   end if
!mmm end function
!rem
!rem // sign(val, [zero]) signs a value for display
!rem //
!rem //   If [zero] is omitted, only positives are signed as "+X" and "0" is left without a sign.
!rem //   For "math", signs a "0" as "+0" for use within a math expression. For "display", signs a "0" as "+/-0". 
!rem //
!mmm function sign(val, zero)
!mmm   if isdefault(val)
!mmm     return false
!mmm   end if
!mmm   if val > 0
!mmm     return "+" & val
!mmm   else if val == 0 and zero eq "display"
!mmm     return "+/-0"
!mmm   else if val == 0 and zero eq "math"
!mmm     return "+0"
!mmm   else
!mmm     return val
!mmm   end if
!mmm end function
!rem
!rem // stringify(list, [quotemark], [connector])
!rem //
!rem //   Builds list as list definition or option strings: "item1", "item2", "item3", ... 
!rem //   All elements are treated as strings themselves. If no quotemark and connector is given, the above template is used.
!rem //
!mmm function stringify(list, quotemark, connector)
!mmm   if isdefault(quotemark)
!mmm     set quotemark = "\""
!mmm   end if
!mmm   if isdefault(connector)
!mmm     set connector = ","
!mmm   end if
!mmm   set string = ""
!mmm   for item in list
!mmm     if string ne ""
!mmm       set string = string & connector
!mmm     end if
!mmm     set string = string & quotemark & item & quotemark
!mmm   end for
!mmm   return string
!mmm end function
!rem
!rem // rollResult(roll, skill, [modifiers])
!rem //
!rem //   Calculates and formats the result of a 1d20 roll on a skill with modifiers for display.
!rem //
!mmm function rollResult(roll, skill, modifiers)
!mmm   set result = roll + skill + modifiers
!mmm   set tooltip = " = 1d20:" & roll & " + FW/WW:" & skill
!mmm   if not isdefault(modifiers)
!mmm     set tooltip = tooltip & " " & sign(modifiers, "display")
!mmm   end if
!mmm   if iscritical(roll)
!mmm     return highlight(result, "good", tooltip)
!mmm   else if isfumble(roll)
!mmm     return highlight(result, "bad", tooltip)
!mmm   else
!mmm     return highlight(result, "normal", tooltip)
!mmm   end if
!mmm end function