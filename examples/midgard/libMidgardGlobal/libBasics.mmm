!rem // libBasics: Basic MMM utility functions
!rem // 
!rem // _libBasics()
!rem // 
!rem //   Initializer and publisher function. Call once from autorun.
!rem //
!mmm function _libBasics()
!mmm   
!mmm   set libVersion = "libMidgardBasics v1.4.5 (2025-03-16)"
!mmm   set sender = "MacroSheetLibrary"
!mmm
!rem   // Brute-force build a dictionary of maximum roll results
!rem
!mmm   for numDice in 1, 2, 3, 4, 5
!mmm     for modifier in -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8
!mmm       for dieType in "d6", "D6"
!mmm         set rollTemplate = numDice & dieType
!mmm         if modifier != 0 
!mmm           set rollTemplate = rollTemplate & sign(modifier)
!mmm         end if
!mmm         set d6Max = { d6Max, (rollTemplate): numDice * 6 + modifier }
!mmm       end for
!mmm     end for
!mmm   end for
!mmm   publish to game: d6Max
!mmm   
!rem   // Localization of key terms to German
!rem
!mmm   set DE = { round: "Runde", rounds: "Runden", defense: "Abwehr", defenses: "Abwehren", attack: "Angriff", attacks: "Angriffe" }
!mmm
!rem   // Publish game-global functions defined below
!rem
!mmm   publish to game: DE
!mmm   publish to game: isfumble, count, isChar, sign, stringify, sum, repeat, rollResult, rollMax, zeroOrPositive
!mmm   publish to game: chatButton, chatButtonPayload, chatButtonTable
!mmm   publish to game: chatTightBoxHeader, chatTightBoxSubHeader, chatTightBoxRow, chatTightBoxButtonSubHeader, chatTightBoxButtonRow, chatTightBoxFlowButton, chatTightBoxMultiButton
!mmm
!mmm   chat: ${libVersion} loaded.
!mmm   
!mmm end function
!rem
!rem // 
!rem // isfumble(rollResult, rollTemplate) overwrites MMM's own isfumble() for a dirty hack that works with simple numbers given as rollResult
!rem // 
!mmm function isfumble(rollResult, rollTemplate)
!mmm   if (isdefault(rollTemplate) or rollTemplate eq "1d20" or rollTemplate eq "1d6") and rollResult == 1
!mmm     return true
!mmm   else if (isdefault(rollTemplate) or rollTemplate eq "1d20" or rollTemplate eq "1d6") and rollResult != 1
!mmm     return false
!mmm   else 
!mmm     return unknown
!mmm   end if
!mmm end function
!rem
!rem // 
!rem // count(list) counts the number of items in list
!rem // 
!mmm function count(list)
!mmm   if isdefault(list)
!mmm     return false
!mmm   end if
!mmm   set count = 0
!mmm   for item in list
!mmm     set count = count + 1
!mmm   end for
!mmm   return count
!mmm end function
!rem
!rem // isChar(id) returns true if id is either a character id itself or a token id linked to a character sheet, otherwise false.
!rem //
!mmm function isChar(id)
!rem   // Tokens unlinked to a char sheet return unknown while player ids return denied
!mmm   if not isunknown(id.character_id) and not isdenied(id.character_id)
!mmm     return true
!mmm   else
!mmm     return false
!mmm   end if
!mmm end function
!rem
!rem // sign(val, [zero]) signs a value for display
!rem //
!rem //   If [zero] is omitted, only positives are signed as "+X" and "0" is left without a sign.
!rem //   For "math", signs a "0" as "+0" for use within a math expression. For "display", signs a "0" as "+/-0". 
!rem //
!mmm function sign(val, zero)
!mmm   if isdefault(val)
!mmm     return false
!mmm   end if
!mmm   if val > 0
!mmm     return "+" & val
!mmm   else if val == 0 and zero eq "display"
!mmm     return "+/-0"
!mmm   else if val == 0 and zero eq "math"
!mmm     return "+0"
!mmm   else
!mmm     return val
!mmm   end if
!mmm end function
!rem
!rem // stringify(list, [quotemark], [connector])
!rem //
!rem //   Builds list as list definition or option strings: "item1", "item2", "item3", ... 
!rem //   All elements are treated as strings themselves. If no quotemark and connector is given, the above template is used.
!rem //
!mmm function stringify(list, quotemark, connector)
!mmm   if isdefault(quotemark)
!mmm     set quotemark = "\""
!mmm   end if
!mmm   if isdefault(connector)
!mmm     set connector = ","
!mmm   end if
!mmm   set string = ""
!mmm   for item in list
!mmm     if string ne ""
!mmm       set string = string & connector
!mmm     end if
!mmm     set string = string & quotemark & item & quotemark
!mmm   end for
!mmm   return string
!mmm end function
!rem
!rem // sum(list)
!rem //
!rem //   Calculates the sum of items in list, which must be defined as a list before (set foo = 1, 2, 3). 
!rem //   If the arguments are not a list, returns the value of the first argument.
!rem //
!mmm function sum(list)
!mmm   set sumVal = 0
!mmm   if count(list) > 1
!mmm     for i in list
!mmm       set sumVal = sumVal + i
!mmm     end for
!mmm   else
!mmm     set sumVal = list
!mmm   end if
!mmm   return sumVal
!mmm end function
!rem
!rem // repeat(string, num)
!rem //
!rem //   Concatenates string num times. If num is zero, returns an empty string.
!rem //
!mmm function repeat(string, num)
!mmm   if num > 0
!mmm     return string & repeat(string, num - 1)
!mmm   else
!mmm     return ""
!mmm   end if
!mmm end function
!rem
!rem // rollResult(roll, baseSkill, [modifiers])
!rem //
!rem //   Calculates and formats the result of a 1d20 roll on baseSkill with modifiers for display.
!rem //   baseSkill can be either a number (12) or a key:value pair of skill label and skill value.
!rem //   modifiers can be an optionalley signed number (+4) or a struct of "reason":modifier pairs.
!rem //
!mmm function rollResult(rollValue, baseSkill, modifiers)
!mmm   
!mmm   if baseSkill + 0 eq baseSkill
!mmm     set baseSkill = {"eFW/WW": baseSkill}
!mmm   end if
!mmm   
!mmm   if (not isdefault(modifiers)) and modifiers + 0 eq modifiers
!mmm     set modifiers = {"": modifiers}
!mmm   end if
!mmm
!mmm   set result = rollValue + (baseSkill...).value
!mmm   set tooltip = " = 1d20:" & rollValue & " + " & (baseSkill...).key & ":" & (baseSkill...).value
!mmm   for mod in modifiers...
!mmm     set result = result + mod.value
!mmm     set tooltip = tooltip & " " & sign(mod.value, "display")
!mmm     if mod.key ne ""
!mmm       set tooltip = tooltip & "(" & mod.key & ")" 
!mmm     end if
!mmm   end for
!mmm
!mmm   if iscritical(rollValue)
!mmm     return highlight(result, "good", tooltip)
!mmm   else if isfumble(rollValue)
!mmm     return highlight(result, "bad", tooltip)
!mmm   else
!mmm     return highlight(result, "normal", tooltip)
!mmm   end if
!mmm
!mmm end function
!rem
!rem // rollMax(rollTemplate)
!rem //
!rem //   Returns the maximum result for rollTemplate, or undef if rollTemplate is unknown.
!rem //
!mmm function rollMax(rollTemplate)
!mmm   
!mmm   return d6Max.(rollTemplate)
!mmm
!mmm end function
!rem
!rem // zeroOrPositive(number)
!rem //
!rem //   Returns number if zero or positive, otherwise zero.
!rem //
!mmm function zeroOrPositive(number)
!mmm   if number < 0
!mmm     return 0
!mmm   else
!mmm     return number
!mmm   end if
!mmm end function
!rem
!rem // chatButton(label, payload, style)
!rem //
!rem //   Returns chat code for a button with the label and payload provided. If the optional style is given, it is applied.
!rem //
!mmm function chatButton(label, payload, style)
!mmm   if isdefault(style)
!mmm     set style = ""
!mmm   end if
!mmm   return " [" & label & "](" & payload & style & ") "
!mmm end function
!rem
!rem // chatButtonPayload(scriptCommand, settings)
!rem //
!rem //   Returns button payload code for a customize script to call scriptCommand with the variables provided by settings.
!rem //
!mmm function chatButtonPayload(scriptCommand, settings)
!mmm   if isdefault(scriptCommand) or isdefault(settings)
!mmm     return false
!mmm   end if
!mmm   set chatButtonPayloadCode = literal("!mmm customize") & "&#13;"
!mmm   for setting in settings...
!mmm     set chatButtonPayloadCode = chatButtonPayloadCode & literal("!mmm set " & setting.key & "=" & setting.value) & "&#13;"
!mmm   end for
!mmm   set chatButtonPayloadCode = chatButtonPayloadCode & literal("!mmm end customize") & "&#13;" & scriptCommand
!mmm   return chatButtonPayloadCode
!mmm end function
!rem
!rem // chatButtonTable(label, rows)
!rem //
!rem //   Returns chat code for a button with the label and payload provided. If the optional style is given, it is applied.
!rem //
!mmm function chatButtonTable(label, rows)
!mmm   if isdefault(label) or isdefault(rows)
!mmm     return false
!mmm   end if
!mmm   set chatButtonTableCode = "&" & "{template:default}" & "{{name=" & label & "}\} "
!mmm   for row in rows
!mmm     if row.type eq "subheading"
!mmm       set chatButtonTableCode = chatButtonTableCode & "{{ " & row.label & " }\} "
!mmm     else if row.type eq "multi-buttons"
!mmm       set chatButtonTableCode = chatButtonTableCode & "{{ "
!mmm       for singleButtonProps in row.buttonProps
!mmm         set chatButtonTableCode = chatButtonTableCode & " &nbsp; " & chatButton(singleButtonProps.label, chatButtonPayload(singleButtonProps.scriptCommand, singleButtonProps.settings))
!mmm       end for
!mmm       set chatButtonTableCode = chatButtonTableCode & "}\} "
!mmm     end if
!mmm   end for
!mmm   return chatButtonTableCode
!mmm end function
!rem
!rem // chatTightBoxHeader(label)
!rem //
!mmm function chatTightBoxHeader(label)
!mmm   set style = 'border: 1px solid #000000; display:block; margin:0px; padding:3px; background-color:#702082;'
!mmm   set style = style & 'font-size:1.05em;font-style:normal;font-weight:bold;color:#FFFFFF;text-decoration:none;'
!mmm   return '[' & label & '](#\" style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxSubHeader(label)
!rem //
!mmm function chatTightBoxSubHeader(label)
!mmm   set style = 'border-left: 1px solid #000000;border-right: 1px solid #000000; border-top: 1px solid #555555; border-bottom: 1px solid #dddddd; display:block; margin:0px; padding:3px; background-color:#ffffff;'
!mmm   set style = style & 'font-size:1.05em;font-style:normal;font-weight:bold;color:#000000;text-decoration:none;'
!mmm   return ' [' & label & '](#\" style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxRow(label, tooltip, bgColor, textColor)
!rem //
!mmm function chatTightBoxRow(label, tooltip, bgColor, textColor)
!mmm   if isdefault(bgColor)
!mmm     set bgColor = "#ffffff"
!mmm   end if
!mmm   if isdefault(textColor)
!mmm     set textColor = "#000000"
!mmm   end if
!mmm   if not isdefault(tooltip)
!mmm     set tooltip = ' title="' & tooltip & '" '
!mmm   end if 
!mmm   set style = "border-left: 1px solid #000000;border-right: 1px solid #000000; display:block; margin:0px; padding:3px; background-color:" & bgColor & ";"
!mmm   set style = style & "font-style:normal; text-decoration:none; color:" & textColor & ";"
!mmm   return ' [' & label & '](#\" ' & tooltip & ' style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxButtonSubHeader(label, tooltip, payload, bgColor, textColor)
!rem //   WARNING: payload MUST NOT CONTAIN any colons (":"), neither literally nor escaped ("\:") or run through MMM's literal() function.
!rem //
!mmm function chatTightBoxButtonSubHeader(label, tooltip, payload, bgColor, textColor)
!mmm   if isdefault(bgColor)
!mmm     set bgColor = "#ffffff"
!mmm   end if
!mmm   if isdefault(textColor)
!mmm     set textColor = "#000000"
!mmm   end if
!mmm   if not isdefault(tooltip)
!mmm     set tooltip = ' title="' & tooltip & '" '
!mmm   end if 
!mmm   if isdefault(payload)
!mmm     set payload = '#'
!mmm   end if
!mmm   set style = "border-left: 1px solid #000000;border-right: 1px solid #000000; border-top: 1px solid #555555; border-bottom: 1px solid #dddddd; display:block; margin:0px; padding:3px; background-color:" & bgColor & ";"
!mmm   set style = style & "font-size:1.05em; font-style:normal; font-weight:bold; color:" & textColor & "; text-decoration:none;"
!mmm   return ' [' & label & '](' & payload & '\" ' & tooltip & ' style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxButtonRow(label, tooltip, payload, bgColor, textColor)
!rem //   WARNING: payload MUST NOT CONTAIN any colons (":"), neither literally nor escaped ("\:") or run through MMM's literal() function.
!rem //
!mmm function chatTightBoxButtonRow(label, tooltip, payload, bgColor, textColor)
!mmm   if isdefault(bgColor)
!mmm     set bgColor = "#ffffff"
!mmm   end if
!mmm   if isdefault(textColor)
!mmm     set textColor = "#000000"
!mmm   end if
!mmm   if not isdefault(tooltip)
!mmm     set tooltip = ' title="' & tooltip & '" '
!mmm   end if 
!mmm   if isdefault(payload)
!mmm     set payload = '#'
!mmm   end if
!mmm   set style = "border-left: 1px solid #000000;border-right: 1px solid #000000; display:block; margin:0px; padding:3px; background-color:" & bgColor & ";"
!mmm   set style = style & "font-style:normal; text-decoration:none; color:" & textColor & ";"
!mmm   return ' [' & label & '](' & payload & '\" ' & tooltip & ' style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxFlowButton(label, tooltip, payload, bgColor, textColor)
!rem //   WARNING: payload MUST NOT CONTAIN any colons (":"), neither literally nor escaped ("\:") or run through MMM's literal() function.
!rem //
!mmm function chatTightBoxFlowButton(label, tooltip, payload, bgColor, textColor)
!mmm   if isdefault(bgColor)
!mmm     set bgColor = "#dddddd"
!mmm   end if
!mmm   if isdefault(textColor)
!mmm     set textColor = "#000000"
!mmm   end if
!mmm   if not isdefault(tooltip)
!mmm     set tooltip = ' title="' & tooltip & '" '
!mmm   end if 
!mmm   if isdefault(payload)
!mmm     set payload = '#'
!mmm   end if
!mmm   set style = "border: 1px solid #000000; display:float; margin:0px; padding:3px; background-color:" & bgColor & ";"
!mmm   set style = style & "font-style:normal; text-decoration:none; color:" & textColor & ";"
!mmm   return ' [' & label & '](' & payload & '\" ' & tooltip & ' style=\"' & style & ')'
!mmm end function
!rem
!rem // chatTightBoxMultiButton(buttons)
!rem //
!rem //   Returns Roll20 chat code for a series of buttons defined by the list of structs { label, payload, [bgColor, textColor] } provided as buttons.
!rem //   CSS display is set to inline, so if the number is small and the labels are short, they should fit in a single row.
!rem //   WARNING: payload MUST NOT CONTAIN any colons (":"), neither literally nor escaped ("\:") or run through MMM's literal() function.
!rem //
!mmm function chatTightBoxMultiButton(buttons)
!mmm   set gap = '[&nbsp;](#\" style=\"display:block;margin:0px;padding:0px;font-size:5px;border:none)'
!mmm   set code = gap
!mmm   for givenProps in buttons
!mmm     set props = givenProps
!mmm     set code = code & "[" & props.label & "]"
!mmm     if not props.bgColor
!mmm       set props = { props, bgColor: "#ffffff" }
!mmm     end if
!mmm     if not props.textColor
!mmm       set props = { props, textColor: "#000000" }
!mmm     end if
!mmm     set style = 'border-left: 1px solid #000000;border-right: 1px solid #000000; display:inline; background-color:' & props.bgColor & ';margin:0px;padding:3px;font-style:normal;color:' & props.textColor & ';text-decoration:none;'
!mmm     set code = code & '(' & props.payload & '\" style=\"' & style & ')'
!mmm   end for
!mmm   set code = code & gap
!mmm   return code
!mmm end function