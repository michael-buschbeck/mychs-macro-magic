!rem // libExchange: MMM data exchange utility functions
!rem // 
!rem // _libExchange()
!rem // 
!rem //   Initializer and publisher function. Call once from autorun.
!rem //
!mmm function _libExchange()
!mmm   
!mmm   set libVersion = "libExchange v1.1.0 (2025-04-25)"
!mmm   set sender = "MacroSheetLibrary"
!mmm
!rem   // Define character sheet to use as central storage
!mmm   set m3mgdExchangeDataSheet = "MacroSheet"
!mmm   set m3mgdExchange = m3mgdExchangeDataSheet.character_id
!mmm   if m3mgdExchange.permission ne "view" and m3mgdExchange.permission ne "control" 
!mmm     do whisperback(libVersion & " - No permission to access Midgard data exchange sheet '" & m3mgdExchangeDataSheet & "'. Data exchange will not work.")
!mmm     do delay(5)
!mmm     return false
!mmm   end if
!mmm
!rem   // Set up individual registry attributes
!mmm   set m3mgdExchangeRegistries = { activePersistentEffects: "m3mgdActivePersistentEffects", combatData: "m3mgdCombatData", nonCombat: "m3mgdNonCombatEffects" }
!mmm   for dataRegistry in m3mgdExchangeRegistries...
!mmm     if isunknown(m3mgdExchange.(dataRegistry.value)) or m3mgdExchange.(dataRegistry.value) eq ""
!mmm       do setattr(m3mgdExchange, dataRegistry.value, serialize({}))
!mmm       do whisperback(libVersion & " - No registry '" & dataRegistry.value & "' in sheet '" & m3mgdExchange & "', created a new one.")
!mmm       do delay(5)
!mmm     end if
!mmm   end for
!mmm
!mmm   set m3mgdScriptCommands = { m3mgdScriptCommands, exchangeRegEdit: "&#x25;{MacroSheet|exchangeRegEdit}" }
!mmm   publish to game: m3mgdScriptCommands
!mmm
!rem   // Publish game-global variables defined below
!rem
!rem   //publish to game: m3mgdExchangeDataSheet, m3mgdExchange
!mmm   publish to game: m3mgdExchange, m3mgdExchangeDataSheet, m3mgdExchangeRegistries
!rem
!rem   // Publish game-global functions defined below
!rem
!mmm   publish to game: m3mgdExchangeFlushRegistry, m3mgdExchangeGetRegistry, m3mgdExchangeStoreEntry, m3mgdExchangeGetData, m3mgdExchangeDelete, m3mgdExchangeEdit
!mmm   publish to game: m3mgdExchangeRegEdit, m3mgdExchangeAssignAttack
!mmm
!mmm   chat: ${libVersion} loaded.
!mmm   
!mmm end function
!rem
!rem // m3mgdExchangeFlushRegistry(registryID)
!rem // 
!rem //   Clears out the central data exchange attribute indicated by m3mgdExchangeDataSheet.(registryID)
!rem // 
!mmm function m3mgdExchangeFlushRegistry(registryID)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeFlushRegistry(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   end if
!mmm
!mmm   return (setattr(m3mgdExchange, registryID, "") eq "") and (setattrmax(m3mgdExchange, registryID, "") eq "")
!mmm
!mmm end function
!rem
!rem // m3mgdExchangeGetRegistry(registryID)
!rem // 
!rem //   Returns the entire data stored in the central data exchange attribute indicated by m3mgdExchangeDataSheet.(registryID)
!rem // 
!mmm function m3mgdExchangeGetRegistry(registryID)
!mmm
!mmm   return deserialize(m3mgdExchange.(registryID))
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeStoreEntry(registryID, entry)
!rem // 
!rem //   Stores entry in the central data registry for retrieval by another script. If entry is a single key-value pair, it replaces the same key.
!rem // 
!mmm function m3mgdExchangeStoreEntry(registryID, entry)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeStoreEntry(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   else if not m3mgdExchange.(registryID)
!mmm     set registry = entry
!mmm   else
!mmm     set registry = m3mgdExchangeGetRegistry(registryID)
!mmm     if registry.(entry.key)
!rem       // if (entry) is a single key-value pair (provided WITHOUT {} braces which would make it a struct!): find the key and replace it
!mmm       set registry = { registry, (entry.key): entry.value }
!mmm     else
!mmm       set registry = registry, entry
!mmm     end if
!mmm   end if
!mmm
!mmm   set serialRegistry = serialize(registry)
!mmm   return (setattr(m3mgdExchange, registryID, serialRegistry) eq serialRegistry)
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeGetData(registryID, searchCriteria)
!rem // 
!rem //   Retrieves one or several entries from a central data registry, as specified by searchCriteria.
!rem //   All given criteria must be met at the same time (AND).
!rem // 
!mmm function m3mgdExchangeGetData(registryID, searchCriteria)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeGetData(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   end if
!mmm
!mmm   if isdefault(searchCriteria)
!mmm     return m3mgdExchangeGetRegistry(registryID)
!mmm   end if 
!mmm
!mmm   set registry = m3mgdExchangeGetRegistry(registryID)
!mmm   for entry in registry
!mmm     set match = false
!mmm     for rule in searchCriteria...
!mmm       if entry.(rule.key) eq rule.value
!mmm         set match = true
!mmm       else
!mmm         set match = false
!mmm         exit for
!mmm       end if
!mmm     end for
!mmm     if match
!mmm       set foundEntries = foundEntries, entry
!mmm     end if
!mmm   end for
!mmm
!mmm   return foundEntries
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeDelete(registryID, searchCriteria)
!rem // 
!rem //   Deletes one or several entries from a central data registry, identified by the searchCriteria provided (all at the same time/AND).
!rem // 
!mmm function m3mgdExchangeDelete(registryID, searchCriteria)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeDeleteEntry(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   else if not m3mgdExchange.(registryID)
!mmm     chat: m3mgdExchangeDeleteEntry(): data exchange registry ${registryID} empty/non-existant => nothing to delete. Aborting.
!mmm     return false
!mmm   end if
!mmm
!mmm   set registry = m3mgdExchangeGetRegistry(registryID)
!mmm   for entry in registry
!mmm     set match = false
!mmm     for rule in searchCriteria...
!mmm       if entry.(rule.key) eq rule.value
!mmm         set match = true
!mmm       else
!mmm         set match = false
!mmm         exit for
!mmm       end if
!mmm     end for
!mmm     if match
!mmm       set foundEntries = foundEntries, entry
!mmm     else
!mmm       set survivingEntries = survivingEntries, entry
!mmm     end if
!mmm   end for
!mmm
!mmm   set serialRegistry = serialize(survivingEntries)
!mmm   return (setattr(m3mgdExchange, registryID, serialRegistry) eq serialRegistry)
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeEdit(registryID, searchCriteria, newData)
!rem // 
!rem //   Changes all entries that match the given searchCriteria by overwriting relevant fields with newData.
!rem // 
!mmm function m3mgdExchangeEdit(registryID, searchCriteria, newData)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeEdit(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   else if not m3mgdExchange.(registryID)
!mmm     chat: m3mgdExchangeEdit(): data exchange registry ${registryID} empty/non-existant => nothing to edit. Aborting.
!mmm     return false
!mmm   end if
!mmm
!mmm   set registry = m3mgdExchangeGetRegistry(registryID)
!mmm   for entry in registry
!mmm     set match = false
!mmm     for rule in searchCriteria...
!mmm       if isdefault(rule.value) or entry.(rule.key) eq rule.value
!mmm         set match = true
!mmm       else
!mmm         set match = false
!mmm         exit for
!mmm       end if
!mmm     end for
!mmm     if match
!mmm       set newEntry = { entry, newData }
!mmm       set newRegistry = newRegistry, newEntry
!mmm       set modifiedEntries = { modifiedEntries, newEntry }
!mmm     else
!mmm       set newRegistry = newRegistry, entry
!mmm     end if
!mmm   end for
!mmm
!mmm   if match
!mmm     set serialRegistry = serialize(newRegistry)
!mmm     if setattr(m3mgdExchange, registryID, serialRegistry) eq serialRegistry
!mmm       return modifiedEntries
!mmm     else
!mmm       return false
!mmm     end if
!mmm   else
!mmm     return false
!mmm   end if
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeRegEdit(registryID, searchCriteria)
!rem // 
!rem //   Shows entries from a central data registry, identified by the searchCriteria provided (all at the same time/AND), and offers editing and removal.
!rem // 
!mmm function m3mgdExchangeRegEdit(registryID, searchCriteria)
!mmm
!mmm   if isdenied(m3mgdExchange.(registryID))
!mmm     chat: m3mgdExchangeRegEdit(): attribute m3mgdExchange.${registryID} not accessible. Aborting.
!mmm     return false
!mmm   end if
!mmm
!mmm   set output = chatTightBoxHeader("Datenaustausch aufräumen: " & registryID)
!mmm   set entryCount = 0
!mmm   for entry in m3mgdExchangeGetData(registryID, searchCriteria) where ... ne {}
!mmm     set outputEntry = "❌ "
!mmm     set tooltip = ""
!mmm     for propertyPair in entry...
!mmm       if isunknown(propertyPair.value.token_id) or isdenied(propertyPair.value.token_id)
!mmm         set outputEntry = outputEntry & propertyPair.key & ": **" & propertyPair.value & "** | "
!mmm       else
!mmm         set outputEntry = outputEntry & propertyPair.key & ": **" & propertyPair.value.token_name & "** (" & propertyPair.value & ") | "
!mmm       end if
!mmm     end for
!mmm     set tooltip = "❌ Diesen Eintrag löschen"
!mmm     set payloadSettings = { "cmd": "'deleteEntry'", "deleteConfirm": true }
!mmm     for i in ("searchByAction": entry.action, "searchByOrigin": entry.origin, "searchByTarget": entry.target, "searchByAttackType": entry.attackType, "searchByAttackResult": entry.attackResult, "searchByDamageResult": entry.damageResult, "searchByMagicSpell": entry.magicSpell) where (...value ne "")
!mmm       set payloadSettings = { payloadSettings, (i.key): "'" & i.value & "'" }
!mmm     end for
!mmm     set payload = chatButtonPayload(m3mgdScriptCommands.exchangeRegEdit, payloadSettings)
!mmm     set output = output & chatTightBoxButtonRow(outputEntry, tooltip, payload)
!mmm     set entryCount = entryCount + 1
!mmm   end for
!mmm
!mmm   if entryCount == 0
!mmm     set output = output & chatTightBoxRow("(keine Einträge)")
!mmm   end if 
!mmm
!mmm   do chat(output & chatTightBoxButtonSubHeader("<< zurück zur Auswahl", "", chatButtonPayload(m3mgdScriptCommands.exchangeRegEdit, { cmd: default })))
!mmm
!mmm end function
!rem 
!rem // m3mgdExchangeAssignAttack(registryID, searchCriteria, targetID)
!rem // 
!rem //   Returns chat code for a button to call the exchangeRegEdit script for a selection of entries specified by the searchCriteria provided (all at the same time/AND).
!rem // 
!mmm function m3mgdExchangeAssignAttack(registryID, searchCriteria, targetID)
!mmm
!mmm   set output = chatTightBoxHeader("Datenaustausch-Problem: Angriff auf " & targetID.name & " zuordnen")
!mmm   set tooltip = "Diesen Angriff " & targetID.name & " zuordnen"
!mmm   for entry in m3mgdExchangeGetData(registryID, searchCriteria)
!mmm     set outputEntry = ""
!mmm     for propertyPair in entry...
!mmm       if isunknown(propertyPair.value.token_id) or isdenied(propertyPair.value.token_id)
!mmm         set outputEntry = outputEntry & propertyPair.key & ": **" & propertyPair.value & "** | "
!mmm       else
!mmm         set outputEntry = outputEntry & propertyPair.key & ": **" & propertyPair.value.token_name & "** (" & propertyPair.value & ") | "
!mmm       end if
!mmm     end for
!mmm     set payload = literal("!mmm customize") & "&#13;"
!mmm     set payload = payload & literal("!mmm set cmd=\"editEntry\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set newTarget=\"" & targetID & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByAction=\"" & entry.action & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByOrigin=\"" & entry.origin & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByAttackType=\"" & entry.attackType & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByAttackResult=\"" & entry.attackResult & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByDamageResult=\"" & entry.damageResult & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm set searchByMagicSpell=\"" & entry.magicSpell & "\"") & "&#13;"
!mmm     set payload = payload & literal("!mmm end customize") & "&#13;" & m3mgdScriptCommands.exchangeRegEdit & "&#13;"
!mmm     set output = output & chatTightBoxButtonRow(outputEntry, tooltip, payload)
!mmm     set entryCount = entryCount + 1
!mmm   end for
!mmm   if entryCount == 0
!mmm     set output = output & chatTightBoxRow("(keine Einträge gefunden)")
!mmm   end if 
!mmm   return(output)
!mmm
!mmm end function