!rem // m3mgdValidateOwnTokenID(tokenID)
!rem // 
!rem //   Validates tokenID or pulls script.cOwnID as a default, checks for reading access.
!rem //   Returns the ID or false in case of validation or access issues.
!rem // 
!mmm function m3mgdValidateOwnTokenID(tokenID)
!mmm   if isdefault(tokenID)
!mmm     set id = script.cOwnID.token_id
!mmm   else
!mmm     set id = tokenID.token_id
!mmm   end if
!mmm 
!mmm   if isunknown(id) or isdenied(id)
!mmm     do whisperback("Token ID invalid: '" & tokenID & "' - " & getreason(id))
!mmm     return false
!mmm   end if
!mmm 
!mmm   return id 
!mmm 
!mmm end function
!rem
!rem // m3mgdValidateTokenAttribute(tokenID, attrLabel, [defaultAttrLabel])
!rem // 
!rem //   Validates attrLabel or, if set to default, defaultAttrLabel, as a readable attribute of tokenID.
!rem //   Returns the attrLabel value found valid or false in case of validation or access issues.
!rem // 
!mmm function m3mgdValidateTokenAttribute(tokenID, attrLabel, defaultAttrLabel)
!mmm 
!mmm   if isunknown(tokenID.(attrLabel)) or isdenied(tokenID.(attrLabel))
!mmm     
!mmm     if isdefault(defaultAttrLabel)
!mmm       do whisperback("Attribute '" & attrLabel & "' unknown or denied for token '" & tokenID.name & "'/" & tokenID & ", no default attribute provided.")
!mmm       return false
!mmm     end if
!mmm     
!mmm     if isunknown(tokenID.(script.(defaultAttrLabel))) or isdenied(tokenID.(script.(defaultAttrLabel)))
!mmm       do whisperback("Attribute '" & attrLabel & "' AND default attribute 'script." & defaultAttrLabel & "' unknown or denied for token '" & tokenID.name & "'/" & tokenID & ".")
!mmm       return false
!mmm     else
!mmm       return script.(defaultAttrLabel)
!mmm     end if
!mmm     
!mmm   end if
!mmm   
!mmm   return attrLabel
!mmm 
!mmm end function
!rem
!rem // m3mgdGetEnduranceAttribute(tokenID)
!rem //
!rem //   Returns name of a valid, preferred attribute to access the token's endurance.
!mmm function m3mgdGetEnduranceAttribute(tokenID)
!mmm   if tokenID.PC
!mmm     return m3mgdValidateTokenAttribute(tokenID, "AP")
!mmm   else
!mmm     return m3mgdValidateTokenAttribute(tokenID, "bar2")
!mmm   end if
!mmm end function
!rem
!rem // m3mgdGetHealthAttr(tokenID)
!rem //
!rem //   Returns name of a valid, preferred attribute to access the token's health.
!mmm function m3mgdGetHealthAttribute(tokenID)
!mmm   if tokenID.PC
!mmm     return m3mgdValidateTokenAttribute(tokenID, "LP")
!mmm   else
!mmm     return m3mgdValidateTokenAttribute(tokenID, "bar3")
!mmm   end if
!mmm end function
!rem
!rem // m3mgdValidateAttackData([dataExchangeID])
!rem // 
!rem //   Expects a global data exchange character sheet as script.m3mgdExchange or as an argument.
!rem //   Validates attack data stack within that sheet and returns true/false.
!rem // 
!mmm function m3mgdValidateAttackData(dataExchangeID)
!mmm
!mmm   if isdefault(dataExchangeID)
!mmm     set dataExchangeID = script.m3mgdExchange
!mmm   end if
!mmm   if isunknown(dataExchangeID) or isdenied(dataExchangeID)
!mmm     do whisperback("Invalid attack data exchange sheet: " & getreason(dataExchangeID))
!mmm     return false
!mmm   end if
!mmm
!mmm   set validItems = 0
!mmm   if dataExchangeID.(m3mgdAttrAttackTargetID).token_id
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if dataExchangeID.(m3mgdAttrAttackType) eq "melee" or dataExchangeID.(m3mgdAttrAttackType) eq "ranged"
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if dataExchangeID.(m3mgdAttrAttackResult) >= 20
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if dataExchangeID.(m3mgdAttrAttackResult).max eq "true" or dataExchangeID.(m3mgdAttrAttackResult).max eq "false"
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if not isunknown(dataExchangeID.(m3mgdAttrAttackDamage)) and dataExchangeID.(m3mgdAttrAttackDamage) >= 0
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if not isunknown(dataExchangeID.(m3mgdAttrAttackDamageRoll)) and dataExchangeID.(m3mgdAttrAttackDamageRoll) >= 0
!mmm     set validItems = validItems + 1
!mmm   end if
!mmm   if not isunknown(dataExchangeID.(m3mgdAttrAttackWeaponType))
!mmm     if dataExchangeID.(m3mgdAttrAttackWeaponType).max ne "" 
!mmm       set validItems = validItems + 1
!mmm     else if dataExchangeID.(m3mgdAttrAttackType) eq "melee" 
!mmm       if m3mgdValidMeleeAttackWeaponTypes where ... eq dataExchangeID.(m3mgdAttrAttackWeaponType)
!mmm         set validItems = validItems + 1
!mmm       else
!mmm         do whisperback("Invalid melee attack weapon type: " & dataExchangeID.(m3mgdAttrAttackWeaponType) & " is none of " & m3mgdValidMeleeAttackWeaponTypes)
!mmm       end if
!mmm     else if dataExchangeID.(m3mgdAttrAttackType) eq "ranged" 
!mmm       if m3mgdValidRangedAttackWeaponTypes where ... eq dataExchangeID.(m3mgdAttrAttackWeaponType)
!mmm         set validItems = validItems + 1
!mmm       else
!mmm         do whisperback("Invalid range attack weapon type: " & dataExchangeID.(m3mgdAttrAttackWeaponType) & " is none of " & m3mgdValidRangedAttackWeaponTypes)
!mmm       end if
!mmm     end if
!mmm   end if 
!mmm
!mmm   return (validItems == 7)
!mmm
!mmm end function
!rem
!rem // m3mgdFlushExchange([dataExchangeID], [attrList])
!rem // 
!rem //   Expects a global data exchange character sheet as script.m3mgdExchange or as an argument
!rem // 
!rem //   Returns the number of attributes set to "" in both their current and max values
!rem // 
!mmm function m3mgdFlushExchange(dataExchangeID, attrList)
!mmm
!mmm   if isdefault(dataExchangeID)
!mmm     set dataExchangeID = script.m3mgdExchange
!mmm   end if
!mmm   if isdefault(attrList)
!mmm     set attrList = script.m3mgdExchangeAttrList
!mmm   end if 
!mmm
!mmm   set flushedCounter = 0
!mmm   for attribute in attrList
!mmm     do setattr(dataExchangeID, attribute, "")
!mmm     do setattrmax(dataExchangeID, attribute, "")
!mmm     set flushedCounter = flushedCounter + 1
!mmm   end for
!mmm
!mmm   return flushedCounter
!mmm 
!mmm end function
!rem 
!rem // m3mgdSetAttrCeiling(tokenID, attrLabel, ceilingValue)
!rem // 
!rem //   Places a temporary ceiling ceilingValue on tokenID attribute attrLabel and saves its value to be restored by m3mgdReleaseAttrCeiling().
!rem //
!mmm function m3mgdSetAttrCeiling(tokenID, attrLabel, ceilingValue)
!mmm
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(attrLabel) or isunknown(tokenID.(attrLabel)) or isdenied(tokenID.(attrLabel))
!mmm     do whisperback("m3mgdSetAttrCeiling(): '" & attrLabel & "' is no valid attribute for token '" & tokenID.name & "'")
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(ceilingValue)
!mmm     set ceilingValue = tokenID.(attrLabel)
!mmm   end if
!mmm   
!mmm   set dataExchangeID = script.m3mgdExchange
!mmm   
!mmm   set storageAttrLabel = "m3mgd_tokenAttrCeiling" & tokenID & "_" & attrLabel
!rem   // Roll20 attributes are always strings, so string comparison theoretically allows for non-numerical "ceilings"
!mmm   if setattr(dataExchangeID, storageAttrLabel, ceilingValue) eq ceilingValue
!mmm     
!rem     // If current attribute value exceeds the ceiling, bring it down
!mmm     if tokenID.(attrLabel) > ceilingValue
!mmm     
!mmm       if setattr(tokenID, attrLabel, ceilingValue) == ceilingValue
!mmm     
!mmm         return ceilingValue
!mmm     
!mmm       else 
!mmm     
!mmm         do whisperback("m3mgdSetAttrCeiling(): Failure changing '" & tokenID.name & "'.'" & attrLabel & "' to '" & ceilingValue & "'.")
!mmm         return false
!mmm
!mmm       end if
!mmm
!mmm     else 
!mmm     
!mmm       return ceilingValue
!mmm     
!mmm     end if
!mmm     
!mmm   else
!mmm   
!mmm     do whisperback("m3mgdSetAttrCeiling(): Failure setting " & ceilingValue & " as ceiling for '" & tokenID.name & "'.'" & attrLabel & "'.")
!mmm     return false
!mmm
!mmm   end if
!mmm   
!mmm end function
!rem
!rem // _m3mgdGetStoredAttr(dataExchangeID, tokenID, attrLabel, [flushStoredAttr])
!rem // 
!rem //   Pulls stored attribute attrLabel for tokenID from data exchange stack and guesses between alternative endurance attributes.
!rem //   If flushStoredAttr == true, resets the stored attribute to "".
!rem //
!mmm function _m3mgdGetStoredAttr(dataExchangeID, tokenID, attrLabel, flushStoredAttr)
!mmm   set paramAttrLabel = attrLabel
!mmm   set storageAttrLabel = "m3mgd_tokenAttrCeiling" & tokenID & "_" & attrLabel
!mmm   if isunknown(dataExchangeID.(storageAttrLabel))
!rem     // Ugly guess for endurance being stored in either "AP" or "bar2": try the other
!mmm     if attrLabel eq "AP" or attrLabel eq "bar2"
!mmm       if attrLabel eq "AP"
!mmm         set attrLabel = "bar2"
!mmm       else if attrLabel eq "bar2"
!mmm         set attrLabel = "AP"
!mmm       end if
!mmm       set storageAttrLabel = "m3mgd_tokenAttrCeiling" & tokenID & "_" & attrLabel
!mmm     end if
!mmm     if isunknown(dataExchangeID.(storageAttrLabel))
!mmm       return false
!mmm     end if
!mmm   end if
!mmm   set payload = dataExchangeID.(storageAttrLabel)
!mmm   if flushStoredAttr
!mmm     do setattr(dataExchangeID, storageAttrLabel, "")
!mmm   end if
!mmm   return payload
!mmm end function
!rem
!rem // m3mgdAttrCeiling(tokenID, attrLabel)
!rem // 
!rem //   Returns tokenID's temporary ceiling placed on attribute attrLabel, if present, otherwise false.
!rem //
!mmm function m3mgdAttrCeiling(tokenID, attrLabel)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(attrLabel) or isunknown(tokenID.(attrLabel)) or isdenied(tokenID.(attrLabel))
!mmm     do whisperback("m3mgdAttrCeiling(): '" & attrLabel & "' is no valid attribute for token '" & tokenID.name & "'")
!mmm     return false
!mmm   end if
!mmm
!mmm   set attrCeiling = _m3mgdGetStoredAttr(script.m3mgdExchange, tokenID, attrLabel)
!mmm   if attrCeiling > 0
!mmm     return attrCeiling
!mmm   else
!mmm     return false
!mmm   end if
!mmm   
!mmm end function
!rem
!rem // m3mgdReleaseAttrCeiling(tokenID, attrLabel)
!rem // 
!rem //   Releases a temporary ceiling placed on tokenID attribute attrLabel by m3mgdSetAttrCeiling() and restores the saved value for it.
!rem //
!mmm function m3mgdReleaseAttrCeiling(tokenID, attrLabel)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(attrLabel) or isunknown(tokenID.(attrLabel)) or isdenied(tokenID.(attrLabel))
!mmm     do whisperback("m3mgdReleaseAttrCeiling(): '" & attrLabel & "' is no valid attribute for token '" & tokenID.name & "'")
!mmm     return false
!mmm   end if
!mmm   
!mmm   set dataExchangeID = script.m3mgdExchange
!mmm   
!mmm   set flushStoredAttr = true
!mmm   set ceilingValue = _m3mgdGetStoredAttr(dataExchangeID, tokenID, attrLabel, flushStoredAttr)
!mmm   if ceilingValue == false or ceilingValue < 0 or (tokenID.(attrLabel).max > 0 and ceilingValue > tokenID.(attrLabel).max)
!mmm   
!mmm     do whisperback("m3mgdReleaseAttrCeiling(): ceiling for '" & tokenID.name & "'.'" & attrLabel & "' is missing or invalid ('" & ceilingValue & "').")
!mmm     return false
!mmm   
!mmm   end if
!mmm   
!mmm   return true
!mmm   
!mmm end function
!rem 
!rem // m3mgdEnduranceStatusLabel(tokenID)
!rem // 
!mmm function m3mgdEnduranceStatusLabel(tokenID)
!mmm   
!mmm   set enduranceLabel = "🔋 "
!mmm
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   if tokenID.status_green eq "shown"
!mmm     
!mmm     return enduranceLabel & "Erschöpft"
!mmm     
!mmm   else
!mmm     
!mmm     return enduranceLabel & "Geht noch!"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdEnduranceStatusEffectsDesc([tokenID], [enduranceAttr])
!rem // 
!mmm function m3mgdEnduranceStatusEffectsDesc(tokenID, enduranceAttr)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set enduranceAttr = m3mgdValidateTokenAttribute(tokenID, enduranceAttr, "cEnduranceAttr")
!mmm   if not enduranceAttr
!mmm     return false
!mmm   end if
!mmm
!mmm   if tokenID.status_green eq "shown"
!mmm     
!mmm     return "🟢 -4 auf alles, max. Last reduziert"
!mmm     
!mmm   else if (tokenID.status_yellow eq "shown" or tokenID.status_red eq "shown" or tokenID.status_death_zone eq "shown") and m3mgdAttrCeiling(tokenID, enduranceAttr)
!mmm     
!mmm     return "🟡 Ausdauer begrenzt auf 50%"
!mmm     
!mmm   else
!mmm     
!mmm     return "keine Einschränkungen"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdEnduranceStatusHighlight([tokenID], [enduranceAttr])
!rem // 
!mmm function m3mgdEnduranceStatusHighlight(tokenID, enduranceAttr)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set enduranceAttr = m3mgdValidateTokenAttribute(tokenID, enduranceAttr, "cEnduranceAttr")
!mmm   if not enduranceAttr
!mmm     return false
!mmm   end if
!mmm
!mmm   if tokenID.(enduranceAttr) == tokenID.(enduranceAttr).max
!mmm     
!mmm     return "good"
!mmm     
!mmm   else if tokenID.status_green eq "shown"
!mmm     
!mmm     return "bad"
!mmm     
!mmm   else
!mmm     
!mmm     return "normal"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdHealthStatusLabel([tokenID], [healthAttr])
!rem // 
!mmm function m3mgdHealthStatusLabel(tokenID, healthAttr)
!mmm   
!mmm   set healthLabel = "⚕️ "
!mmm
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set healthAttr = m3mgdValidateTokenAttribute(tokenID, healthAttr, "cHealthAttr")
!mmm   if not healthAttr
!mmm     return false
!mmm   end if
!mmm
!mmm   if tokenID.status_yellow eq "shown"
!mmm     
!mmm     return healthLabel & "Schwer verwundet"
!mmm     
!mmm   else if tokenID.status_red eq "shown"
!mmm     
!mmm     return healthLabel & "Extrem schwer verwundet"
!mmm     
!mmm   else if tokenID.status_death_zone eq "shown" and tokenID.(healthAttr) >= 0
!mmm     
!mmm     return healthLabel & "Dem Tode nah"
!mmm     
!mmm   else if tokenID.status_death_zone eq "shown" and tokenID.(healthAttr) < 0
!mmm     
!mmm     return healthLabel & "Tödlich verwundet"
!mmm     
!mmm   else
!mmm     
!mmm     return healthLabel & "Soweit in Ordnung!"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdHealthStatusEffectsDesc([tokenID], [healthAttr])
!rem // 
!mmm function m3mgdHealthStatusEffectsDesc(tokenID, healthAttr)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set healthAttr = m3mgdValidateTokenAttribute(tokenID, healthAttr, "cHealthAttr")
!mmm   if not healthAttr
!mmm     return false
!mmm   end if
!mmm
!mmm   if tokenID.status_yellow eq "shown"
!mmm     
!mmm     return "🟡 max. halbe AP, halbe Bewegung"
!mmm     
!mmm   else if tokenID.status_red eq "shown"
!mmm     
!mmm     return "🔴 handlungsunfähig, B=4, PW:Kon nach 10min, sonst Schock"
!mmm     
!mmm   else if tokenID.status_death_zone eq "shown" and tokenID.(healthAttr) >= 0
!mmm     
!mmm     return "💀 handlungsunfähig, B=0, PW:Kon nach 10min, sonst Schock"
!mmm     
!mmm   else if tokenID.status_death_zone eq "shown" and tokenID.(healthAttr) < 0
!mmm     
!mmm     return "💀 **Countdown läuft**"
!mmm     
!mmm   else
!mmm     
!mmm     return "keine Einschränkungen"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdHealthStatusHighlight([tokenID], [healthAttr])
!rem // 
!mmm function m3mgdHealthStatusHighlight(tokenID, healthAttr)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set healthAttr = m3mgdValidateTokenAttribute(tokenID, healthAttr, "cHealthAttr")
!mmm   if not healthAttr
!mmm     return false
!mmm   end if
!mmm
!mmm   if tokenID.(healthAttr) == tokenID.(healthAttr).max
!mmm     
!mmm     return "good"
!mmm     
!mmm   else if tokenID.status_yellow eq "shown"
!mmm     
!mmm     return "important"
!mmm     
!mmm   else if tokenID.status_red eq "shown"
!mmm     
!mmm     return "bad"
!mmm     
!mmm   else if tokenID.status_death_zone eq "shown"
!mmm     
!mmm     return "bad"
!mmm     
!mmm   else
!mmm     
!mmm     return "normal"
!mmm     
!mmm   end if
!mmm     
!mmm end function
!rem // 
!rem // m3mgdModifyEndurance(offset, [tokenID], [enduranceAttr])
!rem // 
!rem // Modifies [tokenID's] or script.cOwnID's endurance by offset points. For a loss, offset is negative.
!rem // Uses script.cEnduranceAttr to access endurance if no enduranceAttr is specified.
!rem // Returns the new level of endurance.
!rem //
!mmm function m3mgdModifyEndurance(offset, tokenID, enduranceAttr)
!mmm   
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm
!mmm   set enduranceAttr = m3mgdValidateTokenAttribute(tokenID, enduranceAttr, "cEnduranceAttr")
!mmm   if not enduranceAttr
!mmm     return false
!mmm   end if
!mmm   
!mmm   set prvEndurance = tokenID.(enduranceAttr)
!mmm   set maxEndurance = tokenID.(enduranceAttr).max
!mmm
!rem   // Check if character is actually alive
!mmm
!mmm   if maxEndurance == 0
!mmm
!rem     // tokenID (AP.max=0) cannot win or lose endurance
!mmm     return highlight(prvEndurance, "normal", "unverändert")
!mmm
!mmm   end if
!mmm
!mmm   set currentCeiling = m3mgdAttrCeiling(tokenID, enduranceAttr)
!mmm   set newEndurance = false
!mmm
!rem   // Process change of endurance and applicable consequences 
!mmm
!mmm   if currentCeiling and prvEndurance + offset > currentCeiling
!mmm     set effOffset = highlight(sign(currentCeiling - prvEndurance, "display"), "important", "begrenzt auf " & currentCeiling)
!mmm   else if prvEndurance + offset > maxEndurance
!mmm     set effOffset = highlight(sign(maxEndurance - prvEndurance, "display"), "important", "begrenzt auf Maximum")
!mmm   else if prvEndurance + offset <= 0
!mmm     set effOffset = highlight(sign(0 - prvEndurance, "display"), "bad", "begrenzt auf Minimum 0")
!mmm   else
!mmm     set effOffset = highlight(sign(offset), "normal")
!mmm   end if 
!mmm   
!mmm   set newEndurance = prvEndurance + effOffset
!mmm   
!mmm   if newEndurance == maxEndurance
!mmm   
!mmm     set newEndurance = highlight(newEndurance, "good", "Bin sowas von topfit! (= " & prvEndurance & effOffset & ")")
!mmm     do setattr(tokenID, "status_green", false)
!mmm   
!mmm   else if currentCeiling and newEndurance == currentCeiling and newEndurance > 0
!mmm   
!mmm     set newEndurance = highlight(newEndurance, "important", "🟡 (= " & prvEndurance & effOffset & ")")
!mmm     do setattr(tokenID, "status_green", false)
!mmm   
!mmm   else if newEndurance == 0
!mmm   
!mmm     set newEndurance = highlight(newEndurance, "bad", "🟢 (= " & prvEndurance & effOffset & ")")
!mmm     do setattr(tokenID, "status_green", true)
!mmm     do m3mgdCancelRuneEffects(tokenID)
!mmm   
!mmm   else
!mmm   
!mmm     set newEndurance = highlight(newEndurance, "normal", "Och, das bisschen Schweiß! (= " & prvEndurance & effOffset & ")")
!mmm     do setattr(tokenID, "status_green", false)
!mmm   
!mmm   end if
!mmm   
!mmm   if setattr(tokenID, enduranceAttr, newEndurance) == newEndurance
!mmm   
!mmm     return newEndurance
!mmm     
!mmm   else 
!mmm     
!mmm     do whisperback("Error writing changes to endurance (" & effOffset & ") into " & tokenID & "." & enduranceAttr)
!mmm     return false
!mmm     
!mmm   end if
!mmm   
!mmm end function
!rem 
!rem // m3mgdModifyHealth(offset, [tokenID], [healthAttr])
!rem // 
!rem // Modifies [tokenID's] or script.cOwnID's health by offset points. For a loss, offset is negative.
!rem // Uses script.cHealthAttr to access health points if no healthAttr is specified.
!rem // Returns the new level of health.
!rem //
!mmm function m3mgdModifyHealth(offset, tokenID, healthAttr)
!mmm
!mmm   if isdefault(offset)
!mmm     return false
!mmm   end if
!mmm
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   
!mmm   set healthAttr = m3mgdValidateTokenAttribute(tokenID, healthAttr, "cHealthAttr")
!mmm   if not healthAttr
!mmm     return false
!mmm   end if
!mmm   
!rem   // Check if character is actually alive
!mmm
!mmm   set prvHealth = tokenID.(healthAttr)
!mmm   set maxHealth = tokenID.(healthAttr).max
!mmm
!mmm   if maxHealth == 0
!mmm
!rem     // tokenID (LP.max=0) is not alive (possibly undead), so it cannot be healed or injured
!mmm     return highlight(prvHealth, "normal", "unverändert")
!mmm
!mmm   else
!mmm
!rem     // Process health gain and applicable consequences 
!mmm
!mmm     if prvHealth + offset > maxHealth
!mmm       set effOffset = highlight(sign(maxHealth - prvHealth, "display"), "important", "begrenzt auf Maximum")
!mmm     else if prvHealth + offset <= 0
!mmm       set effOffset = highlight(sign(offset, "display"), "bad")
!mmm     else
!mmm       set effOffset = highlight(sign(offset, "display"), "normal")
!mmm     end if 
!mmm   
!mmm     set newHealth = prvHealth + effOffset
!mmm   
!mmm     if newHealth == maxHealth
!mmm   
!mmm       set newHealth = highlight(newHealth, "good", "💪 kerngesund! (= " & prvHealth & effOffset & ")")
!mmm       do setattr(tokenID, "status_death_zone", false)
!mmm       do setattr(tokenID, "status_red", false)
!mmm       do setattr(tokenID, "status_yellow", false)
!mmm   
!mmm     else if newHealth <= 0
!mmm   
!mmm       set newHealth = highlight(newHealth, "bad", "💀 (fast) tot (= " & prvHealth & effOffset & ")")
!mmm       do setattr(tokenID, "status_death_zone", true)
!mmm       do setattr(tokenID, "status_red", false)
!mmm       do setattr(tokenID, "status_yellow", false)
!mmm   
!mmm     else if newHealth <= 3
!mmm   
!rem       // Health <= 3: Red token marker => no actions, movement reduced to 4, 10-minute countdown to shock
!mmm       set newHealth = highlight(newHealth, "bad", "🔴 sehr schwer verletzt (= " & prvHealth & effOffset & ")")
!mmm       do setattr(tokenID, "status_death_zone", false)
!mmm       do setattr(tokenID, "status_red", true)
!mmm       do setattr(tokenID, "status_yellow", false)
!mmm   
!mmm     else if newHealth <= .5 * maxHealth
!mmm   
!rem       // Health <= 50%: Yellow token marker => endurance and movement to be limited to 50%
!mmm       set newHealth = highlight(newHealth, "important", "🟡 schwer verletzt (= " & prvHealth & effOffset & ")")
!mmm       do setattr(tokenID, "status_death_zone", false)
!mmm       do setattr(tokenID, "status_red", false)
!mmm       do setattr(tokenID, "status_yellow", true)
!mmm   
!mmm     else
!mmm   
!mmm       set newHealth = highlight(newHealth, "normal", "Nur ein paar Kratzer! (= " & prvHealth & effOffset & ")")
!mmm       do setattr(tokenID, "status_death_zone", false)
!mmm       do setattr(tokenID, "status_red", false)
!mmm       do setattr(tokenID, "status_yellow", false)
!mmm   
!mmm     end if
!mmm   
!mmm     if setattr(tokenID, healthAttr, newHealth) == newHealth
!mmm       
!mmm       set enduranceAttr = m3mgdValidateTokenAttribute(tokenID, default, "cEnduranceAttr")
!mmm
!mmm       if tokenID.(enduranceAttr).max > 0
!mmm
!mmm         if prvHealth > .5 * maxHealth and newHealth <= .5 * maxHealth
!mmm         
!mmm           set enduranceCeiling = round(.5 * tokenID.(enduranceAttr).max)
!mmm           do m3mgdSetAttrCeiling(tokenID, enduranceAttr, enduranceCeiling)
!mmm         
!mmm         else if prvHealth <= .5 * maxHealth and newHealth > .5 * maxHealth
!mmm         
!mmm           do m3mgdReleaseAttrCeiling(tokenID, enduranceAttr)
!mmm         
!mmm         end if
!mmm         
!mmm       end if
!mmm       
!mmm       return newHealth
!mmm     
!mmm     else 
!mmm     
!mmm       do whisperback("Error writing changes to health (" & effOffset & ") into " & tokenID & "." & healthAttr)
!mmm       return false
!mmm     
!mmm     end if
!mmm   
!mmm   end if
!mmm   
!mmm end function
!rem
!rem // m3mgdGetTokenDirection(fromTokenID, toTokenID)
!rem //
!rem // Returns toTokenID's direction from the vantage point of fromTokenID, in degrees. 
!rem //
!mmm function m3mgdGetTokenDirection(fromTokenID, toTokenID)
!mmm
!mmm   set offsetYfromFoe = round((fromTokenID.top  - toTokenID.top)  * distscale())
!mmm   set offsetXfromFoe = round((fromTokenID.left - toTokenID.left) * distscale())
!mmm   return round(atan(-offsetYfromFoe, -offsetXfromFoe)) - 90
!mmm
!mmm end function
!rem
!rem // m3mgdGetViewAngle(fromTokenID, toTokenID)
!rem //
!rem // Returns fromTokenID's angle of vision towards toTokenID, in degrees. 
!rem //
!mmm function m3mgdGetViewAngle(fromTokenID, toTokenID)
!mmm
!mmm   set foeDirectionFromMe = m3mgdGetTokenDirection(fromTokenID, toTokenID)
!mmm   set myViewAngle = ((foeDirectionFromMe - round(fromTokenID.rotation) % 360) + 180) % 360 - 180
!mmm
!mmm   return myViewAngle
!mmm
!mmm end function
!rem
!rem // m3mgdGetDistance(fromTokenID, toTokenID)
!rem //
!rem // Returns distance between fromTokenID and toTokenID, in distunits(). 
!rem //
!mmm function m3mgdGetDistance(fromTokenID, toTokenID)
!mmm
!mmm   set absDistY = ((abs(fromTokenID.top  - toTokenID.top))  - .5 * fromTokenID.height - .5 * toTokenID.height) * distscale()
!mmm   set absDistX = ((abs(fromTokenID.left - toTokenID.left)) - .5 * fromTokenID.width  - .5 * toTokenID.width)  * distscale()
!mmm
!mmm   return round(max(absDistY, absDistX))
!mmm
!mmm end function
!rem
!rem // m3mgdIsDefenseless(tokenID, [healthAttr])
!rem //
!rem // Returns true if tokenID is defenseless because of close to zero health.
!rem // If healthAttr is not provided, the check defaults to script.cHealthAttr.
!rem //
!mmm function m3mgdIsDefenseless(tokenID, healthAttr)
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return unknown
!mmm   end if
!mmm   if isdefault(healthAttr)
!mmm     if script.cHealthAttr
!mmm       set healthAttr = script.cHealthAttr
!mmm     else 
!mmm       do whisperback("No health attribute provided as argument or at script level")
!mmm       return unknown
!mmm     end if
!mmm   end if
!mmm   if not tokenID.(healthAttr).max == 0 and tokenID.(healthAttr) <= 3
!mmm     return true
!mmm   else
!mmm     return false
!mmm   end if
!mmm end function
!rem
!rem // m3mgdShapeMoji(tokenID, [healthAttr], [enduranceAttr])
!rem //
!rem // Returns visual indicator of health and exhaustion or lack to access to health/endurance attributes.
!rem // If healthAttr/enduranceAttr are not provided, they default to script.cHealthAttr/cEnduranceAttr.
!rem //
!mmm function m3mgdShapeMoji(tokenID, healthAttr, enduranceAttr)
!mmm   set tokenID = m3mgdValidateOwnTokenID(tokenID)
!mmm   if not tokenID
!mmm     return false
!mmm   end if
!mmm   if isdefault(healthAttr)
!mmm     if script.cHealthAttr
!mmm       set healthAttr = script.cHealthAttr
!mmm     else 
!mmm       do whisperback("No health attribute provided as argument or at script level")
!mmm       return false
!mmm     end if
!mmm   end if
!mmm   if isdefault(enduranceAttr)
!mmm     if script.cEnduranceAttr
!mmm       set enduranceAttr = script.cEnduranceAttr
!mmm     else
!mmm       do whisperback("No endurance attribute provided as argument or at script level")
!mmm       return false
!mmm     end if
!mmm   end if
!mmm
!mmm   if isdenied(tokenID.(healthAttr)) or isdenied(tokenID.(enduranceAttr))
!mmm     return highlight("🔒", "bad", tokenID.name & ".AP/LP: Zugriff auf mind. ein Attribut verweigert")
!mmm   end if 
!mmm
!mmm   if not tokenID.(healthAttr).max == 0 and tokenID.(healthAttr) <= 0
!mmm     return highlight("💀", "bad", "Dem Tode nah... jetzt zählt jede Sekunde!")
!mmm   end if
!mmm
!mmm   set shapeMoji = ""
!mmm   if tokenID.(healthAttr).max != 0 and tokenID.(healthAttr) < .5 * tokenID.(healthAttr).max
!mmm     set shapeMoji = shapeMoji & "🤕"
!mmm   end if 
!mmm   if tokenID.(enduranceAttr).max != 0 and tokenID.(enduranceAttr) <= 0
!mmm     set shapeMoji = shapeMoji & "🥴"
!mmm   end if 
!mmm   if shapeMoji eq ""
!mmm     set shapeMoji = "😀"
!mmm   end if 
!mmm     
!mmm   return shapeMoji
!mmm     
!mmm end function
!rem
!rem // m3mgdExchangeStoreAttack(attackType)
!rem //
!mmm function m3mgdExchangeStoreAttack(attackType, magicSpell)
!mmm   
!mmm   set dataExchangeID = script.m3mgdExchange
!mmm   do m3mgdFlushExchange(dataExchangeID)
!mmm
!mmm   if attackType eq "magic" and magicSpell eq ""
!mmm     do whisperback("Incomplete data for a magic attack: spell argument missing")
!mmm     return false
!mmm   else if attackType ne "magic"
!mmm     set magicSpell = ""
!mmm   end if
!mmm 
!mmm   set storeTarget = 4
!mmm   set storeCounter = 0
!mmm
!rem   // Store the bare minimum of any attack dataset
!mmm
!mmm   if setattr(dataExchangeID, script.m3mgdAttrAttackType, attackType) eq attackType
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   if setattrmax(dataExchangeID, script.m3mgdAttrAttackType, magicSpell) eq magicSpell
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   if setattr(dataExchangeID, script.m3mgdAttrAttackerID, script.cOwnID) eq script.cOwnID
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   if setattr(dataExchangeID, script.m3mgdAttrAttackTargetID, script.foeID) eq script.foeID
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm 
!rem   // Store additional data only if present
!mmm
!mmm   if script.attackResult >= 20
!mmm     set storeTarget = storeTarget + 1
!mmm     if setattr(dataExchangeID, script.m3mgdAttrAttackResult, script.attackResult) == script.attackResult
!mmm       set storeCounter = storeCounter + 1
!mmm     end if
!mmm   end if
!mmm
!mmm   if script.criticalAttack == true or script.criticalAttack == false
!mmm     set storeTarget = storeTarget + 1
!rem     // normalize boolean variable to avoid setting the attribute to undef (which would evaluate as false above)
!mmm     set criticalAttack = (script.criticalAttack == true)
!mmm     if setattrmax(dataExchangeID, script.m3mgdAttrAttackResult, criticalAttack) == script.criticalAttack
!mmm       set storeCounter = storeCounter + 1
!mmm     end if
!mmm   end if
!mmm
!mmm   if script.damageResult > 0
!mmm     set storeTarget = storeTarget + 1
!mmm     if setattr(dataExchangeID, script.m3mgdAttrAttackDamage, script.damageResult) == script.damageResult
!mmm       set storeCounter = storeCounter + 1
!mmm     end if
!mmm   end if
!mmm   
!mmm   if script.damageRoll > 0 or script.damageRoll < 0
!mmm     set storeTarget = storeTarget + 1
!mmm     set damageRoll = script.damageRoll
!mmm     if damageRoll < 0
!mmm       set damageRoll = 0
!mmm     end if
!mmm     if setattr(dataExchangeID, script.m3mgdAttrAttackDamageRoll, damageRoll) == damageRoll
!mmm       set storeCounter = storeCounter + 1
!mmm     end if
!mmm   end if
!mmm
!mmm   if script.cWeaponType ne ""
!mmm     set storeTarget = storeTarget + 1
!mmm     if setattr(dataExchangeID, script.m3mgdAttrAttackWeaponType, script.cWeaponType[0]) eq script.cWeaponType[0]
!mmm       set storeCounter = storeCounter + 1
!mmm     end if
!mmm     if script.cWeaponType[1] ne ""
!mmm       set storeTarget = storeTarget + 1
!mmm       if setattrmax(dataExchangeID, script.m3mgdAttrAttackWeaponType, script.cWeaponType[1]) eq script.cWeaponType[1]
!mmm         set storeCounter = storeCounter + 1
!mmm       end if
!mmm     end if
!mmm   end if
!mmm
!mmm   return (storeCounter == storeTarget)
!mmm   
!mmm end function
!rem
!rem // m3mgdExchangeStoreHealthBoost(healthGain, targetID)
!rem //
!rem //   Allows for positive AND negative values of healthGain, since critical failures of First Aid etc. result in damage.
!rem //
!mmm function m3mgdExchangeStoreHealthBoost(healthGain, targetID)
!mmm   
!mmm   set dataExchangeID = script.m3mgdExchange
!mmm
!mmm   if isdefault(healthGain) or not healthGain
!mmm     return false
!mmm   end if
!mmm
!mmm   if isdefault(targetID) and not isunknown(script.cOwnID)
!mmm     return false
!mmm   end if
!mmm 
!mmm   set storeCounter = 0
!mmm   if setattr(dataExchangeID, script.m3mgdAttrHealthGain, healthGain) eq healthGain
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   if setattrmax(dataExchangeID, script.m3mgdAttrHealthGain, targetID) eq targetID
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   return (storeCounter == 2)
!mmm   
!mmm end function
!rem
!rem // m3mgdExchangeStoreEnduranceBoost(enduranceGain, targetID)
!rem //
!rem //   Allows for positive AND negative values of enduranceGain, since critical failures of First Aid etc. result in damage.
!rem //
!mmm function m3mgdExchangeStoreEnduranceBoost(enduranceGain, targetID)
!mmm   
!mmm   set dataExchangeID = script.m3mgdExchange
!mmm
!mmm   if isdefault(enduranceGain) or not enduranceGain
!mmm     return false
!mmm   end if
!mmm
!mmm   if isdefault(targetID) and not isunknown(script.cOwnID)
!mmm     return false
!mmm   end if
!mmm 
!mmm   set storeCounter = 0
!mmm   if setattr(dataExchangeID, script.m3mgdAttrEnduranceGain, enduranceGain) eq enduranceGain
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   if setattrmax(dataExchangeID, script.m3mgdAttrEnduranceGain, targetID) eq targetID
!mmm     set storeCounter = storeCounter + 1
!mmm   end if
!mmm   return (storeCounter == 2)
!mmm   
!mmm end function
!rem
!rem // m3mgdListDefenseWeapons(tokenID)
!rem // 
!rem //   Returns a list of tokenID's defense weapons (attribute names), or false if there are none or none accessible.
!rem // 
!mmm function m3mgdListDefenseWeapons(tokenID)
!mmm   for weaponsAttr in findattr(tokenID, "Abwehr", "AbwWaffe")
!mmm     set defenseWeaponsList = defenseWeaponsList, weaponsAttr
!mmm   end for
!mmm   if isunknown(defenseWeaponsList) or isdenied(defenseWeaponsList)
!mmm     return false
!mmm   else 
!mmm     return defenseWeaponsList
!mmm   end if
!mmm end function
!rem
!rem // m3mgdListMeleeAttackWeapons(tokenID)
!rem // 
!rem //   Returns a list of tokenID's melee attack weapons (attribute names), or false if there are none or none accessible.
!rem // 
!mmm function m3mgdListMeleeAttackWeapons(tokenID)
!mmm   set attackWeaponsList = findattr(tokenID, "Angriff", "Waffe")
!mmm   if isunknown(attackWeaponsList) or isdenied(attackWeaponsList)
!mmm     return false
!mmm   end if
!mmm   for attackWeaponAttr in attackWeaponsList
!mmm     if tokenID.(findattr(tokenID, "Angriff", "Waffe", tokenID.(attackWeaponAttr), "FKWaffe")) != 1
!mmm       set meleeAttackWeaponsList = meleeAttackWeaponsList, attackWeaponAttr
!mmm     end if
!mmm   end for
!mmm   return meleeAttackWeaponsList
!mmm end function
!rem
!rem // m3mgdListRangedAttackWeapons(tokenID)
!rem // 
!rem //   Returns a list of tokenID's ranged attack weapons (attribute names), or false if there are none or none accessible.
!rem // 
!mmm function m3mgdListRangedAttackWeapons(tokenID)
!mmm   set attackWeaponsList = findattr(tokenID, "Angriff", "Waffe")
!mmm   if isunknown(attackWeaponsList) or isdenied(attackWeaponsList)
!mmm     return false
!mmm   end if
!mmm   for attackWeaponAttr in attackWeaponsList
!mmm     if tokenID.(findattr(tokenID, "Angriff", "Waffe", tokenID.(attackWeaponAttr), "FKWaffe")) == 1
!mmm       set rangedAttackWeaponsList = rangedAttackWeaponsList, attackWeaponAttr
!mmm     end if
!mmm   end for
!mmm   return rangedAttackWeaponsList
!mmm end function
!rem
!rem // m3mgdDefenseWeaponType(weaponLabel)
!rem // 
!rem //   If weaponLabel is exactly one of a list of standard attack or defense arms, returns the correct weaponType for it. 
!rem //   Otherwise returns unknown. 
!rem // 
!mmm function m3mgdDefenseWeaponType(weaponLabel)
!mmm 
!mmm   set weaponType = unknown
!mmm   
!mmm   if ("Buckler", "großer Schild", "Großer Schild", "kleiner Schild", "Kleiner Schild") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Schild"
!mmm   
!mmm   else if ("Kampfgabeln", "Parierdolch") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Parierwaffe"
!mmm   
!mmm   else if weaponLabel eq "Abwehr ohne Schild" or weaponLabel eq "ohne Schild"
!mmm   
!mmm     set weaponType = ""
!mmm   
!mmm   end if
!mmm   
!mmm   return weaponType
!mmm 
!mmm end function
!rem
!rem // m3mgdMeleeWeaponType(weaponLabel)
!rem // 
!rem //   If weaponLabel is exactly one of a list of standard attack or defense arms, returns the correct weaponType for it. 
!rem //   Otherwise returns unknown. 
!rem // 
!mmm function m3mgdMeleeWeaponType(weaponLabel)
!mmm 
!mmm   set weaponType = unknown
!mmm   
!mmm   if ("Handaxt", "Keule", "Kriegshammer", "Schlachtbeil einhändig", "Steinhammer", "Streitaxt", "Streitkolben") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Einhandschlagwaffe"
!mmm   
!mmm   else if ("Anderthalbhänder", "Krummschwert", "Langschwert", "Krummsäbel", "Säbel") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Einhandschwert"
!mmm   
!mmm   else if ("Florett", "Fuchtel", "Rapier") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Fechtwaffe"
!mmm   
!mmm   else if ("Kriegsflegel", "Morgenstern", "NunChaku") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Kettenwaffe"
!mmm   
!mmm   else if ("Gleffe", "Hellebarde", "leichter Speer", "Stielhammer", "Stoßspeer") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Spießwaffe"
!mmm   
!mmm   else if ("Dolch", "Wurfmesser als Dolch", "Kurzschwert", "Ochsenzunge") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Stichwaffe"
!mmm   
!mmm   else if ("Bo-Stab", "Kampfstab") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Stockwaffe"
!mmm   
!mmm   else if ("Magierstab", "Magierstecken", "Magierstecken gegen Flugwesen") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Zauberstab"
!mmm   
!mmm   else if ("Barbarenstreitaxt", "Gleffe", "Hellebarde", "Ogerhammer", "Schlachtbeil zweihändig", "Stabkeule", "Stielhammer") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Zweihandschlagwaffe"
!mmm   
!mmm   else if ("Anderthalbhänder", "Bihänder") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "Zweihandschwert"
!mmm   
!mmm   else if ("waffenloser Kampf", "Faust", "Faustkampf", "Ringen (ohne Rüstung)", "Ringen (mit Rüstung)", "Tatze", "Klaue", "Tentakel", "Biss", "Horn", "Berührung") where ... eq weaponLabel
!mmm   
!mmm     set weaponType = "waffenlos"
!mmm   
!mmm   end if
!mmm   
!mmm   return weaponType
!mmm 
!mmm end function
!rem
!rem // m3mgdRangedWeaponProperties(weaponLabel)
!rem // 
!rem //   If weaponLabel is exactly one of a list of standard attack or defense arms, returns a list of weaponProperties. 
!rem //   Otherwise returns unknown. 
!rem //   weaponProperties := (weaponType, lowRangeUpperBound, midRangeUpperBound, farRangeUpperBound, ammoLabel)
!rem // 
!mmm function m3mgdRangedWeaponProperties(weaponLabel)
!mmm 
!mmm   set weaponProperties = unknown
!mmm   
!mmm   if weaponLabel eq "Wurfaxt" or weaponLabel eq "Wurfhammer"
!mmm   
!mmm     set weaponProperties = ("Stielwurfwaffe", 10, 20, 30, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfeisen" or weaponLabel eq "Wurfkeule"
!mmm   
!mmm     set weaponProperties = ("Stielwurfwaffe", 10, 20, 50, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfmesser"
!mmm   
!mmm     set weaponProperties = ("Wurfklinge", 10, 15, 20, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfpfeil"
!mmm   
!mmm     set weaponProperties = ("Wurfklinge", 10, 20, 30, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfscheibe"
!mmm   
!mmm     set weaponProperties = ("Wurfscheibe", 10, 20, 30, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfstern"
!mmm   
!mmm     set weaponProperties = ("Wurfscheibe", 5, 10, 15, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Speerschleuder"
!mmm   
!mmm     set weaponProperties = ("Wurfspieß", 20, 40, 70, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfspeer"
!mmm   
!mmm     set weaponProperties = ("Wurfspieß", 10, 30, 50, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "Wurfspieß"
!mmm   
!mmm     set weaponProperties = ("Wurfspieß", 10, 20, 30, weaponLabel)
!mmm   
!mmm   else if weaponLabel eq "leichte Armbrust"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 120, 220, "Bolzen")
!mmm   
!mmm   else if weaponLabel eq "schwere Armbrust"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 120, 240, "Bolzen")
!mmm   
!mmm   else if weaponLabel eq "Handarmbrust"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 20, 40, 70, "Bolzen")
!mmm   
!mmm   else if weaponLabel eq "langes Blasrohr"
!mmm   
!mmm     set weaponProperties = ("Blasrohr", 10, 15, 20, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "kurzes Blasrohr"
!mmm   
!mmm     set weaponProperties = ("Blasrohr", 5, 7, 10, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "Bogen"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 100, 180, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "Kurzbogen"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 80, 120, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "Kompositbogen"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 120, 200, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "Langbogen"
!mmm   
!mmm     set weaponProperties = (weaponLabel, 30, 120, 200, "Pfeile")
!mmm   
!mmm   else if weaponLabel eq "Schleuder"
!mmm   
!mmm     set weaponProperties = ("Schleuder", 30, 60, 90, "Kugeln")
!mmm   
!mmm   else if weaponLabel eq "Stockschleuder"
!mmm   
!mmm     set weaponProperties = ("Schleuder", 50, 100, 180, "Kugeln")
!mmm   
!mmm   end if
!mmm   
!mmm   return weaponProperties
!mmm 
!mmm end function
!rem
!rem // m3mgdWeaponSelectorChatMenu([tokenID], [weaponsGroup], [attackWeaponType])  
!rem //
!rem //   Whispers a chat menu for tokenID to its player to select among weaponsGroup ("defense", "melee" or "ranged").
!rem //   Buttons execute a customize block to hand over the chosen weapon to the relevant script. 
!rem //   Scripts called differ between player characters (identified by the attribute "PC" evaluating as true) and NPCs.
!rem //
!mmm function m3mgdWeaponSelectorChatMenu(tokenID, weaponsGroup, attackWeaponType)  
!mmm   
!mmm   if isdefault(tokenID)
!mmm     set tokenID = sender.token_id
!mmm   end if
!mmm   
!mmm   if isdefault(weaponsGroup)
!mmm     set weaponsGroup = "melee"
!mmm   end if
!mmm
!mmm   if weaponsGroup eq "defense" and (isdefault(attackWeaponType) or isunknown(attackWeaponType))
!mmm     do whisperback("m3mgdWeaponSelectorChatMenu(): called for defense weapons without attackWeaponType. Aborting.")
!mmm     return false
!mmm   end if
!mmm   
!mmm   if weaponsGroup eq "defense"
!rem     // Will show "no-defense" option in any case; add defense options only if we don't already know that the token is a defenseless target
!mmm     if not m3mgdIsDefenseless(tokenID)
!mmm       set weaponsList = m3mgdListDefenseWeapons(tokenID)
!mmm     end if
!mmm     set selectorPrompt = "Auswahl: Abwehrwaffe"
!mmm     if tokenID.PC
!mmm       set scriptCommand = "&#x25;{MacroSheet|defense}"
!mmm     else
!mmm       set scriptCommand = "&#x25;{GM_NPC_Makros|NPC_Abwehr}"
!mmm     end if
!mmm   else if weaponsGroup eq "melee"
!mmm     set weaponsList = m3mgdListMeleeAttackWeapons(tokenID)
!mmm     set selectorPrompt = "Auswahl: Nahkampfwaffe"
!mmm     if tokenID.PC
!mmm       set scriptCommand = "&#x25;{MacroSheet|meleeAttack}"
!mmm     else
!mmm       set scriptCommand = "&#x25;{GM_NPC_Makros|NPC_Nahkampfangriff}"
!mmm     end if
!mmm   else if weaponsGroup eq "ranged"
!mmm     set weaponsList = m3mgdListRangedAttackWeapons(tokenID)
!mmm     set selectorPrompt = "Auswahl: Fernkampfwaffe"
!mmm     if tokenID.PC
!mmm       set scriptCommand = "&#x25;{MacroSheet|rangedAttack}"
!mmm     else
!mmm       set scriptCommand = "&#x25;{GM_NPC_Makros|NPC_Fernkampfangriff}"
!mmm     end if
!mmm   end if
!mmm   
!mmm   if isunknown(tokenID.PC)
!mmm     set selectorPrompt = selectorPrompt & " (🤐) "
!mmm   end if
!mmm
!mmm   if weaponsGroup eq "defense"
!mmm     set noDefensePayload = "!mmm customize&#13;"
!mmm     set noDefensePayload = noDefensePayload & "!mmm set cOwnID&#x3D;&#x22;" & tokenID & "&#x22;&#13;"
!mmm     set noDefensePayload = noDefensePayload & "!mmm set cNoDefense&#x3D;&#x22;true&#x22;&#13;"
!mmm     set noDefensePayload = noDefensePayload & "!mmm end customize&#13;"
!mmm     set noDefensePayload = noDefensePayload & "&#x25;{MacroSheet|defenseMain}"
!mmm     set selectorPrompt = selectorPrompt & " [Wehrlos](" & noDefensePayload & cssTableHeaderButton & ") "
!mmm   end if
!mmm
!mmm   set chatMenu = ""
!mmm   set itemCounter = 0
!mmm
!mmm   for weaponLabelAttr in weaponsList
!mmm     
!mmm     set weaponLabel = tokenID.(weaponLabelAttr)
!mmm     
!mmm     if weaponsGroup eq "defense"
!mmm       
!mmm       set weaponType = m3mgdDefenseWeaponType(weaponLabel)
!mmm     
!rem       // Check if weaponType may not help against attackWeaponType 
!mmm       if weaponLabel eq "Abwehr ohne Schild" or weaponLabel eq "ohne Schild"
!mmm         set weaponUsable = true
!mmm       else
!mmm         set weaponUsable = false
!mmm         if m3mgdParryLargeShieldTypes where ... eq weaponLabel 
!mmm           set weaponUsable = true
!mmm         else if (m3mgdParrySmallShieldTypes where ... eq weaponLabel) and (m3mgdParrySmallShieldEffectiveAgainst where ... eq attackWeaponType)
!mmm           set weaponUsable = true
!mmm         else if (m3mgdParryStandardTypes where ... eq weaponLabel) and (m3mgdParryStandardEffectiveAgainst where ... eq attackWeaponType)
!mmm           set weaponUsable = true
!mmm         end if
!mmm       end if
!mmm       
!mmm     else if weaponsGroup eq "melee"
!mmm     
!mmm       set weaponType = m3mgdMeleeWeaponType(weaponLabel)
!mmm       set weaponUsable = true
!mmm     
!mmm     else if weaponsGroup eq "ranged"
!mmm     
!mmm       set weaponProps = m3mgdRangedWeaponProperties(weaponLabel)
!mmm       set weaponType = weaponProps[0]
!mmm       set weaponUsable = true
!mmm     
!mmm     end if
!mmm
!mmm     if weaponUsable
!mmm       
!mmm       set weaponScriptCommand = scriptCommand
!rem       // Overwrite weaponScriptCommand if there is a custom config script registered in character sheet
!mmm       set customCall = tokenID.("m3mgd_configCall_" & weaponLabel)
!mmm       if not isunknown(customCall)
!mmm         set weaponScriptCommand = "&#x25;{" & tokenID.character_name & "|" & customCall & "}"
!mmm       end if
!mmm
!mmm       set payload = "!mmm customize&#13;"
!mmm       set payload = payload & "!mmm set cOwnID&#x3D;&#x22;" & tokenID & "&#x22;&#13;"
!mmm       set payload = payload & "!mmm set cWeaponLabel&#x3D;&#x22;" & "&#x40;" & "{" & tokenID.character_name & "|" & weaponLabelAttr & "}" & "&#x22;&#13;"
!mmm       set payload = payload & "!mmm set cWeaponType&#x3D;&#x22;" & weaponType & "&#x22;&#13;"
!mmm       set payload = payload & "!mmm set cNoDefense&#x3D;&#x22;false&#x22;&#13;"
!mmm       set payload = payload & "!mmm end customize&#13;"
!mmm       set payload = payload & weaponScriptCommand
!mmm     
!mmm       if itemCounter % 2 == 0
!mmm         set chatMenu = chatMenu & "{\{[" & weaponLabel & "](" & payload & ")="
!mmm       else
!mmm         set chatMenu = chatMenu & "[**" & weaponLabel & "**](" & payload & ")}\}"
!mmm       end if
!mmm       set itemCounter = itemCounter + 1
!mmm
!mmm     end if
!mmm
!mmm   end for
!mmm
!mmm   if itemCounter % 2 != 0
!mmm     set chatMenu = chatMenu & "}\}"
!mmm   else if itemCounter == 0
!mmm     set chatMenu = chatMenu & "{\{(keine)}\}"
!mmm   end if
!mmm   set chatMenu = "&" & "{template:default} {\{name=" & selectorPrompt & "}\} " & chatMenu
!rem
!rem   // Override chat sender for characters unconnected to the player (usually NPCs)
!mmm   set sender = tokenID.token_name
!mmm   
!mmm   chat: /w "${tokenID.character_name}" ${chatMenu}
!rem //  chat: ${chatMenu}
!mmm   
!mmm   return true
!mmm   
!mmm end function
!rem
!rem // m3mgdProcessCombatPP(ownID, weaponLabel, [targetID])
!rem //
!rem //   Processes gain of a practice point for ownID's critically successful attack or defense roll using weaponLabel (in case of an attack, to hit targetID).
!rem //
!mmm function m3mgdProcessCombatPP(ownID, weaponLabel, targetID)
!mmm
!mmm   if ownID.permission ne "control"
!mmm     do whisperback("m3mgdProcessCombatPP(): Unable to register practice point for critically successful attack: no control over token '" & ownID.name & "'")
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(weaponLabel) or not ((isdefault(targetID) and ownID.(findattr(ownID, "Abwehr", "AbwWaffe", weaponLabel, "FWAbwWaffe"))) or (not isdefault(targetID) and ownID.(findattr(ownID, "Angriff", "Waffe", weaponLabel, "WaffeEW"))))
!mmm     do whisperback("m3mgdProcessCombatPP(): Unable to register practice point for critically successful attack: weapon '" & weaponLabel & "' not found for token '" & ownID.name & "'")
!mmm     return false
!mmm   end if
!mmm
!mmm   if isdefault(targetID)
!mmm
!rem     // Defense critical success
!mmm
!mmm     set weaponPPattr = findattr(ownID, "Abwehr", "AbwWaffe", weaponLabel, "AbWWaffePP")
!mmm
!mmm   else
!mmm
!rem     // Attack critical success
!mmm
!mmm     if targetID.permission ne "view" and targetID.permission ne "control"
!mmm       do whisperback("m3mgdProcessCombatPP(): Unable to register practice point for critically successful attack: invalid target token or no view access to token '" & targetID.name & "'")
!mmm       return false
!mmm     end if
!mmm   
!mmm     if targetID.(script.cEnduranceAttr) <= 0
!mmm       do whisperback("m3mgdProcessCombatPP(): No practice point registered for critically successful attack on an exhausted target ('" & targetID.name & "')")
!mmm       return false
!mmm     end if
!mmm   
!mmm     set weaponPPattr = findattr(ownID, "Angriff", "Waffe", weaponLabel, "WaffePP")
!mmm
!mmm   end if
!mmm
!rem   // Roll20 stores only attributes that have been touched at least once, so if the attribute is missing, it needs to be created first
!mmm   if not weaponPPattr
!mmm     set weaponPPattr = findattr(ownID, "Angriff", "Waffe", weaponLabel, "Waffe") & "PP"
!mmm     if setattr(ownID, weaponPPattr, 0) != 0
!mmm       do whisperback("m3mgdProcessCombatPP(): Failure initializing unused practice points attribute '" & ownID.name & "'." & weaponPPattr)
!mmm       return false
!mmm     end if
!mmm   end if
!mmm   set oldPP = ownID.(weaponPPattr)
!mmm   set newPP = oldPP + 1
!mmm   if setattr(ownID, weaponPPattr, newPP) != newPP
!mmm     do whisperback("m3mgdProcessCombatPP(): Failure storing new practice points total " & newPP & " in attribute '" & ownID.name & "'." & weaponPPattr)
!mmm     return false
!mmm   end if
!mmm
!mmm   set logLine = "PP:" & weaponLabel & "(" & newPP & ")=Kritisch erfolgreicher Angriff auf " & targetID.name & " (AP=" & targetID.(script.cEnduranceAttr) & ")"
!mmm   if isunknown(ownID.(script.m3mgdAttrXPLog))
!mmm     do setattr(ownID, script.m3mgdAttrXPLog, "")
!mmm   end if
!mmm   do setattr(ownID, script.m3mgdAttrXPLog, ownID.(script.m3mgdAttrXPLog) & " {\{" & logLine & "}\} ")
!mmm
!mmm   return true
!mmm
!mmm end function
!rem
!rem // m3mgdProcessAttackXP(attackType, attackDamageRoll, [attackerID], [targetID])
!rem //
!rem //   Processes experience gain from mundane attacks (attackType: melee or ranged).
!rem //
!mmm function m3mgdProcessAttackXP(attackType, attackDamageRoll, attackerID, targetID)
!mmm
!mmm   if isdefault(attackType) or not (attackType eq "melee" or attackType eq "ranged")
!mmm     do whisperback("m3mgdProcessAttackXP(): no or invalid attackType parameter: " & attackType & " -- no experience processed.")
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(attackDamageRoll) or attackDamageRoll <= 0
!mmm     do whisperback("m3mgdProcessAttackXP(): no or invalid attackDamageRoll parameter: " & attackDamageRoll & " -- no experience processed.")
!mmm     return false
!mmm   end if
!mmm   
!mmm   if isdefault(attackerID)
!mmm     set attackerID = script.m3mgdExchange.(script.m3mgdAttrAttackerID)
!mmm   end if
!mmm   if attackerID.permission ne "control"
!mmm     do whisperback("m3mgdProcessAttackXP(): Unable to process experience for attack: no control over token '" & attackerID.name & "'")
!mmm     return false
!mmm   end if
!mmm
!mmm   if isdefault(targetID)
!mmm     set targetID = script.cOwnID
!mmm   end if
!mmm   if targetID.permission ne "view" and targetID.permission ne "control"
!mmm     do whisperback("m3mgdProcessAttackXP(): Unable to process experience for attack: invalid target token or no view access to token '" & targetID.name & "'")
!mmm     return false
!mmm   end if
!mmm   
!mmm   set xpGain = targetID.Grad + 3
!mmm   set xpTooltip = targetID.Grad & "[Grad]+3"
!mmm   if attackType eq "ranged"
!mmm     set xpGain = xpGain / 2
!mmm     set xpTooltip = "(" & xpTooltip & ") /2[FK]"
!mmm   end if
!rem   // Devastating hits
!mmm   if attackDamageRoll >= 8 and targetID.(script.cEnduranceAttr) >= 8
!mmm     set xpGain = xpGain * 2
!mmm     set xpTooltip = "(" & xpTooltip & ") x2[verheerend]"
!mmm   end if
!mmm   
!mmm   set newXP = attackerID.(script.m3mgdAttrXP) + xpGain
!mmm   if newXP <= 0 or not newXP
!mmm     do whisperback("m3mgdProcessAttackXP(): Failure: new calculated XP likely undefined ('" & newXP & "') -- no experience processed.")
!mmm     return false
!mmm   end if
!mmm   if setattr(attackerID, script.m3mgdAttrXP, newXP) != newXP
!mmm     do whisperback("m3mgdProcessAttackXP(): Failure storing new experience total " & newXP & " in attribute '" & attackerID.name & "'." & script.m3mgdAttrXP)
!mmm     return false
!mmm   end if
!mmm
!mmm   set xpLog = attackerID.(script.m3mgdAttrXP) & "(+" & xpGain & ")=Angriff (" & attackType & ", Wurf: " & attackDamageRoll & ") auf " & targetID.name & " (Grad: " & targetID.Grad & ") = " & xpTooltip
!mmm   if isunknown(attackerID.(script.m3mgdAttrXPLog))
!mmm     do setattr(attackerID, script.m3mgdAttrXPLog, "")
!mmm   end if
!mmm   do setattr(attackerID, script.m3mgdAttrXPLog, attackerID.(script.m3mgdAttrXPLog) & " {\{" & xpLog & "}\} ")
!mmm
!mmm   return highlight(xpGain, "normal", xpTooltip)
!mmm
!mmm end function
!rem
!rem // m3mgdDefenseDataTable()
!rem //
!mmm function m3mgdDefenseDataTable()
!mmm
!rem   // Prepare output
!rem
!mmm   set prvEndurance = script.endurance
!mmm   set prvHealth = script.health
!mmm   set shapeMoji = m3mgdShapeMoji(script.cOwnID, script.cHealthAttr, script.cEnduranceAttr)
!mmm
!mmm   if script.criticalAttack
!mmm     set attackResult = highlight(script.attackResult, "good", "Kritisch erfolgreicher Angriff von " & script.m3mgdExchange.(m3mgdAttrAttackerID).name)
!mmm   else
!mmm     set attackResult = highlight(script.attackResult, "info", "Angriff von " & script.m3mgdExchange.(m3mgdAttrAttackerID).name)
!mmm   end if
!mmm   set attackDamage = highlight(script.m3mgdExchange.(m3mgdAttrAttackDamage), "info", script.m3mgdExchange.(m3mgdAttrAttackType))
!mmm   set effEnduranceLoss = highlight(script.effEnduranceLoss, "normal")
!mmm   set effHealthLoss = highlight(script.effHealthLoss, "normal")
!mmm
!mmm   set sender = script.cOwnID.token_name
!rem
!rem   // Build data table
!rem
!mmm   combine chat
!mmm
!mmm     if script.cGMSilentMode
!mmm       chat: /w GM 
!mmm     end if
!mmm
!mmm     chat: ${"&"}{template:default} 
!mmm
!mmm     if script.cNoDefense
!mmm       chat: {\{name=${shapeMoji}${script.cOwnID.name}: Keine Abwehr (wehrlos) }\}
!mmm     else if script.m3mgdExchange.(m3mgdAttrAttackType) eq "magic"
!mmm       chat: {\{name=${shapeMoji}${script.cOwnID.name}: Abwehr gegen ${script.m3mgdExchange.(m3mgdAttrAttackType).max} }\}
!mmm     else if script.cWeaponLabel eq "Abwehr ohne Schild"
!mmm       chat: {\{name=${shapeMoji}${script.cOwnID.name}: Abwehr ohne Schild }\}
!mmm     else
!mmm       chat: {\{name=${shapeMoji}${script.cOwnID.name}: Abwehr mit ${script.cWeaponLabel} }\}
!mmm     end if 
!mmm
!mmm     if script.armorProtection > 3 and script.armorPiercing == true and attackDamage > 3
!mmm       chat: {\{Angriff=**${attackResult}&nbsp;/&nbsp;${attackDamage}&nbsp;Schaden** (Rüstungsschutz wg. Geschosstyp auf 3 begrenzt)}\}
!mmm     else if attackDamage & "" eq "0"
!mmm       chat: {\{Angriff=**${attackResult}&nbsp;/&nbsp;Sonderschaden**}\}
!mmm     else if attackDamage > 0
!mmm       chat: {\{Angriff=**${attackResult}&nbsp;/&nbsp;${attackDamage}&nbsp;Schaden**}\}
!mmm     else
!mmm       chat: {\{Angriff=${attackResult} }\}
!mmm     end if
!mmm
!mmm     if script.defenseSuccess
!mmm       chat: {\{Ergebnis=${script.defenseResult} **Leichter Treffer**}\}
!mmm     else if script.criticalAttack == true
!mmm       chat: {\{Ergebnis=${script.defenseResult} **Schwerer kritischer Treffer**}\}
!mmm     else 
!mmm       chat: {\{Ergebnis=${script.defenseResult} **Schwerer Treffer**}\}
!mmm     end if
!mmm
!mmm     if script.defenseSuccess and effEnduranceLoss > 0
!mmm       chat: {\{Schaden=**${effEnduranceLoss}&nbsp;AP**}\}
!mmm     else if not script.defenseSuccess and attackDamage & "" eq "0"
!mmm       chat: {\{Schaden=**SPEZIAL**}\}
!mmm     else if not script.defenseSuccess
!mmm       chat: {\{Schaden=**${effHealthLoss}&nbsp;LP&nbsp;/&nbsp;${effEnduranceLoss}&nbsp;AP**}\}
!mmm     end if
!mmm
!mmm     if script.criticalAttack == true and script.m3mgdExchange.(m3mgdAttrAttackType) eq "magic"
!mmm       chat: {\{Kritischer Zaubererfolg=Zauber wirkt **doppelt so stark** oder ist **halb so teuer**: Nach Wahl des Zauberers umsetzen.}\}
!mmm     else if script.criticalAttack == true
!mmm       chat: {\{Kritischer Schaden=🎲🎲🎲}\}
!mmm     end if
!mmm
!mmm     if script.newHealth < 0 and script.timeToDie < 0
!mmm     
!mmm       chat: {\{&#10013;=${highlight("Sofortiger Tod", "bad", "Todeskampf: " & script.timeToDie-script.newHealth & "(🎲1d6)" & script.newHealth & "=" & script.timeToDie)} }\}
!mmm     
!mmm     else
!mmm     
!mmm       chat: {\{Zustand=${script.newHealth} **LP** / ${script.newEndurance} **AP**}\}
!mmm       chat: {\{${m3mgdHealthStatusLabel(script.cOwnID, script.cHealthAttr)}=${m3mgdHealthStatusEffectsDesc(script.cOwnID, script.cHealthAttr)} }\}
!mmm       chat: {\{${m3mgdEnduranceStatusLabel(script.cOwnID)}=${m3mgdEnduranceStatusEffectsDesc(script.cOwnID, script.cEnduranceAttr)} }\}
!mmm     
!mmm     end if
!mmm
!mmm   end combine
!mmm
!mmm   return true
!mmm   
!mmm end function
!rem
!rem // m3mgdWeaponSpecialEffect(effect)
!rem //
!mmm function m3mgdWeaponSpecialEffect(effect, attackerID)
!mmm
!mmm   if isdefault(effect)
!mmm     return false
!mmm   end if
!mmm
!mmm   if effect eq "waterWalkerBlastEffect"
!mmm     
!mmm     do m3mgdRuneEffectWaterWalker(attackerID, default, "water-blast")
!mmm     
!mmm   end if
!mmm     
!mmm   return true
!mmm
!mmm end function
!rem
!rem // m3mgdInjuryFX(tokenID, relativeHealthLoss, relativeEnduranceLoss)
!rem //
!mmm function m3mgdInjuryFX(tokenID, relativeHealthLoss, relativeEnduranceLoss)
!mmm
!mmm   if relativeHealthLoss >= .2
!mmm     set fx = "nova-blood"
!mmm   else if relativeHealthLoss > 0
!mmm     set fx = "bubbling-blood"
!mmm   else if relativeEnduranceLoss > 0
!mmm     set fx = "bubbling-water"
!mmm   end if
!mmm   if fx ne ""
!mmm     do delay(3)
!mmm     do spawnfx(fx, tokenID.left, tokenID.top)
!mmm     do delay(1)
!mmm     do spawnfx(fx, tokenID.left, tokenID.top)
!mmm   end if
!mmm end function