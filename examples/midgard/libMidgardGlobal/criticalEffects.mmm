!mmm script
!mmm
!rem // dev code for handling combat critical effects
!mmm
!mmm function getCriticalEffect(type, selectRoll)
!mmm 
!mmm   set effectTable = m3mgdCriticalEffectsTable.(type)
!mmm   set bestMatch = undef
!mmm   for effectRow in effectTable...
!mmm     if (bestMatch and selectRoll <= effectRow.key and effectRow.key < (bestMatch...).key) or (not bestMatch and selectRoll <= effectRow.key)
!mmm       set bestMatch = { (effectRow.key): effectRow.value }
!mmm     end if
!mmm   end for
!mmm   return (bestMatch...).value
!mmm end function
!mmm
!mmm function addCriticalEffect(tokenID, critEffect)
!mmm
!mmm   debug chat: adding critical effect to token ${tokenID.name}
!mmm   do setattr(tokenID, "status_blue", tokenID.status_blue + 1)
!mmm   if isunknown(tokenID.m3mgdActiveCriticalEffects) or tokenID.m3mgdActiveCriticalEffects eq ""
!mmm     do setattr(tokenID, "m3mgdActiveCriticalEffects", serialize(critEffect))
!mmm   else 
!mmm     do setattr(tokenID, "m3mgdActiveCriticalEffects", serialize((deserialize(tokenID.m3mgdActiveCriticalEffects), critEffect)))
!mmm   end if
!mmm
!mmm end function
!mmm publish to sender: addCriticalEffect
!mmm
!rem // moveToken() moves a token by fwd/rgtOffset from its own perspective
!mmm function moveToken(tokenID, fwdOffset, rgtOffset)
!mmm   
!mmm     set ownRotation = round(tokenID.rotation) % 360
!mmm     
!mmm     if ownRotation > 270
!mmm       set angle = ownRotation - 270
!mmm       set xOffset = 1
!mmm       set yOffset = 1
!mmm     else if ownRotation > 180
!mmm       set angle = ownRotation - 180
!mmm       set xOffset = 1
!mmm       set yOffset = -1
!mmm     else if ownRotation > 90
!mmm       set angle = ownRotation - 90
!mmm       set xOffset = -1
!mmm       set yOffset = -1
!mmm     else 
!mmm       set angle = ownRotation
!mmm       set xOffset = -1
!mmm       set yOffset = 1
!mmm     end if
!mmm     set distance = 1 * distsnap()
!mmm     set xOffset = xOffset * (distance * sin(angle))
!mmm     set yOffset = yOffset * ((distance**2 - xOffset**2) ** 0.5)
!mmm     
!mmm   do setattr(tokenID, "left", tokenID.left + xOffset)
!mmm   do setattr(tokenID, "top", tokenID.top + yOffset)
!mmm end function
!mmm publish to sender: moveToken
!mmm
!mmm function spawnWeaponToken(ownerID, offsetX, offsetY)
!mmm   chat: !Spawn --name|tokenMuleWeapons --side|rand --offset|${offsetX},${offsetY} --order|top --controlledby|all --tokenProps|name:${ownerID.name}'s Weapon,showname:1
!mmm end function
!mmm publish to sender: spawnWeaponToken
!mmm
!mmm   if not m3mgdCriticalEffectsTable
!mmm     if "MacroSheet".m3mgdCriticalEffectsTable ne ""
!mmm       set m3mgdCriticalEffectsTable = deserialize("MacroSheet".m3mgdCriticalEffectsTable)
!mmm     else
!mmm       set m3mgdCriticalEffectsTable = {}
!mmm     end if
!mmm     publish to game: m3mgdCriticalEffectsTable
!mmm   end if
!mmm   
!mmm   set tableName = "defenseFailure"
!mmm   set effectRoll = highlight(roll("1d100"), "normal", "Wurf 1W100")
!mmm   chat: So you rolled a critical ${tableName} ...
!mmm   set myCriticalEffect = getCriticalEffect(tableName, effectRoll)
!mmm   chat: You rolled your D100 for a result of ${effectRoll} which means:
!mmm   chat: ${myCriticalEffect.desc}
!mmm   chat: Executing...
!mmm
!rem   // publish variables that should be available for critical effect code
!mmm   set myID = "Yorric MacRathgar".token_id
!mmm   publish to sender: myID
!mmm   if myCriticalEffect.code > 1
!mmm     for line in myCriticalEffect.code
!mmm       debug chat: executing ${line}
!mmm       chat: ${line}
!mmm     end for
!mmm   else
!mmm       debug chat: executing ${myCriticalEffect.code}
!mmm       chat: ${myCriticalEffect.code}
!mmm   end if
!mmm
!mmm end script